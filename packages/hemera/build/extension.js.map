{"version":3,"sources":["../lib/extension.js"],"names":["Extension","type","server","_stack","_type","_server","handler","push","handlers","concat","ctx","cb","each","item","next","prevValue","i","response","_response","call","_request","serial","bind","array","method","callback","length","iterate","done","err","value","abort"],"mappings":";;;;;;;;;;AAAA;;;;;;AAMA;;;IAGqBA,S;AAEnB,qBAAaC,IAAb,EAAmBC,MAAnB,EAA2B;AAAA;;AACzB,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAaH,IAAb;AACA,SAAKI,OAAL,GAAeH,MAAf;AACD;;AAED;;;;;;;;;;;wBAOKI,O,EAAS;AACZ,WAAKH,MAAL,CAAYI,IAAZ,CAAiBD,OAAjB;AACD;;AAED;;;;;;;;;;6BAOUE,Q,EAAU;AAClB,WAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYM,MAAZ,CAAmBD,QAAnB,CAAd;AACD;AACD;;;;;;;;;;2BAOQE,G,EAAKC,E,EAAI;AAAA;;AACf,UAAMC,OAAO,SAAPA,IAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,CAAxB,EAA8B;AACzC,YAAI,MAAKX,OAAT,EAAkB;AAChB,cAAMY,WAAWP,IAAIQ,SAArB;AACAD,mBAASH,IAAT,GAAgBA,IAAhB;;AAEAD,eAAKM,IAAL,CAAUT,GAAV,EAAeA,IAAIU,QAAnB,EAA6BH,QAA7B,EAAuCH,IAAvC,EAA6CC,SAA7C,EAAwDC,CAAxD;AACD,SALD,MAKO;AACLH,eAAKM,IAAL,CAAUT,GAAV,EAAeI,IAAf,EAAqBE,CAArB;AACD;AACF,OATD;;AAWAhB,gBAAUqB,MAAV,CAAiB,KAAKlB,MAAtB,EAA8BS,IAA9B,EAAoCD,GAAGW,IAAH,CAAQZ,GAAR,CAApC;AACD;AACD;;;;;;;;;;;;2BASea,K,EAAOC,M,EAAQC,Q,EAAU;AACtC,UAAI,CAACF,MAAMG,MAAX,EAAmB;AACjBD;AACD,OAFD,MAEO;AACL,YAAIT,IAAI,CAAR;;AAEA,YAAMW,UAAU,SAAVA,OAAU,CAAUZ,SAAV,EAAqB;AACnC,cAAMa,OAAO,SAAPA,IAAO,CAAUC,GAAV,EAAeC,KAAf,EAAsBC,KAAtB,EAA6B;AACxC,gBAAIF,GAAJ,EAAS;AACPJ,uBAASI,GAAT;AACD,aAFD,MAEO,IAAIC,SAASC,KAAb,EAAoB;AACzBN,uBAAS,IAAT,EAAeK,KAAf;AACD,aAFM,MAEA;AACLd,kBAAIA,IAAI,CAAR;;AAEA,kBAAIA,IAAIO,MAAMG,MAAd,EAAsB;AACpBC,wBAAQG,KAAR;AACD,eAFD,MAEO;AACLL,yBAAS,IAAT,EAAeK,KAAf;AACD;AACF;AACF,WAdD;;AAgBAN,iBAAOD,MAAMP,CAAN,CAAP,EAAiBY,IAAjB,EAAuBb,SAAvB,EAAkCC,CAAlC;AACD,SAlBD;;AAoBAW;AACD;AACF;;;;;;kBAvFkB3B,S","file":"extension.js","sourcesContent":["/*!\r\n * hemera\r\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * @class Extension\r\n */\r\nexport default class Extension {\r\n\r\n  constructor (type, server) {\r\n    this._stack = []\r\n    this._type = type\r\n    this._server = server\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {any} handler\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  add (handler) {\r\n    this._stack.push(handler)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Array<Function>} handlers\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  addRange (handlers) {\r\n    this._stack = this._stack.concat(handlers)\r\n  }\r\n  /**\r\n   *\r\n   *\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  invoke (ctx, cb) {\r\n    const each = (item, next, prevValue, i) => {\r\n      if (this._server) {\r\n        const response = ctx._response\r\n        response.next = next\r\n\r\n        item.call(ctx, ctx._request, response, next, prevValue, i)\r\n      } else {\r\n        item.call(ctx, next, i)\r\n      }\r\n    }\r\n\r\n    Extension.serial(this._stack, each, cb.bind(ctx))\r\n  }\r\n  /**\r\n   *\r\n   *\r\n   * @param {Array<Function>} array\r\n   * @param {Function} method\r\n   * @param {Function} callback\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  static serial (array, method, callback) {\r\n    if (!array.length) {\r\n      callback()\r\n    } else {\r\n      let i = 0\r\n\r\n      const iterate = function (prevValue) {\r\n        const done = function (err, value, abort) {\r\n          if (err) {\r\n            callback(err)\r\n          } else if (value && abort) {\r\n            callback(null, value)\r\n          } else {\r\n            i = i + 1\r\n\r\n            if (i < array.length) {\r\n              iterate(value)\r\n            } else {\r\n              callback(null, value)\r\n            }\r\n          }\r\n        }\r\n\r\n        method(array[i], done, prevValue, i)\r\n      }\r\n\r\n      iterate()\r\n    }\r\n  }\r\n}\r\n"]}