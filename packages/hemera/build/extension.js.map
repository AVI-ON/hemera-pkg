{"version":3,"sources":["../lib/extension.js"],"names":["Extension","type","server","_stack","_type","_server","handler","push","handlers","concat","ctx","cb","each","item","next","prevValue","i","response","_response","call","_request","serial","bind","array","method","callback","length","iterate","done","err","value","abort","module","exports"],"mappings":";;;;;;AAEA;;;;;;AAMA;;;IAGMA,S;AAMJ,qBAAYC,IAAZ,EAA0BC,MAA1B,EAA4C;AAAA;;AAE1C,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAaH,IAAb;AACA,SAAKI,OAAL,GAAeH,MAAf;AACD;;AAED;;;;;;;;;;;wBAOII,O,EAAmB;;AAErB,WAAKH,MAAL,CAAYI,IAAZ,CAAiBD,OAAjB;AAED;;AAED;;;;;;;;;;6BAOSE,Q,EAA4B;;AAEnC,WAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYM,MAAZ,CAAmBD,QAAnB,CAAd;AAED;AACD;;;;;;;;;;2BAOOE,G,EAAaC,E,EAAc;AAAA;;AAEhC,UAAMC,OAAO,SAAPA,IAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,CAAxB,EAA8B;;AAEzC,YAAI,MAAKX,OAAT,EAAkB;;AAEhB,cAAMY,WAAWP,IAAIQ,SAArB;AACAD,mBAASH,IAAT,GAAgBA,IAAhB;;AAEAD,eAAKM,IAAL,CAAUT,GAAV,EAAeA,IAAIU,QAAnB,EAA6BH,QAA7B,EAAuCH,IAAvC,EAA6CC,SAA7C,EAAwDC,CAAxD;AACD,SAND,MAMO;;AAELH,eAAKM,IAAL,CAAUT,GAAV,EAAeI,IAAf,EAAqBE,CAArB;AACD;AAEF,OAbD;;AAeAhB,gBAAUqB,MAAV,CAAiB,KAAKlB,MAAtB,EAA8BS,IAA9B,EAAoCD,GAAGW,IAAH,CAAQZ,GAAR,CAApC;AAED;AACD;;;;;;;;;;;;2BASca,K,EAAyBC,M,EAAkBC,Q,EAAoB;;AAE3E,UAAI,CAACF,MAAMG,MAAX,EAAmB;;AAEjBD;AACD,OAHD,MAGO;AAAA;;AAEL,cAAIT,IAAI,CAAR;;AAEA,cAAMW,UAAU,SAAVA,OAAU,CAAUZ,SAAV,EAAqB;;AAEnC,gBAAMa,OAAO,SAAPA,IAAO,CAAUC,GAAV,EAAeC,KAAf,EAAsBC,KAAtB,EAA6B;;AAExC,kBAAIF,GAAJ,EAAS;;AAEPJ,yBAASI,GAAT;AACD,eAHD,MAGO,IAAIC,SAASC,KAAb,EAAoB;;AAEzBN,yBAAS,IAAT,EAAeK,KAAf;AACD,eAHM,MAGA;;AAELd,oBAAIA,IAAI,CAAR;;AAEA,oBAAIA,IAAIO,MAAMG,MAAd,EAAsB;;AAEpBC,0BAAQG,KAAR;AACD,iBAHD,MAGO;;AAELL,2BAAS,IAAT,EAAeK,KAAf;AACD;AACF;AACF,aApBD;;AAsBAN,mBAAOD,MAAMP,CAAN,CAAP,EAAiBY,IAAjB,EAAuBb,SAAvB,EAAkCC,CAAlC;AACD,WAzBD;;AA2BAW;AA/BK;AAgCN;AACF;;;;;;AAGHK,OAAOC,OAAP,GAAiBjC,SAAjB","file":"extension.js","sourcesContent":["// @flow\r\n\r\n/*!\r\n * hemera\r\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * @class Extension\r\n */\r\nclass Extension {\r\n\r\n  _stack: Array<Function>;\r\n  _type: string;\r\n  _server: boolean;\r\n\r\n  constructor(type: string, server?: boolean) {\r\n\r\n    this._stack = []\r\n    this._type = type\r\n    this._server = server\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {any} handler\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  add(handler: Function) {\r\n\r\n    this._stack.push(handler)\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Array<Function>} handlers\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  addRange(handlers: Array<Function> ) {\r\n\r\n    this._stack = this._stack.concat(handlers)\r\n\r\n  }\r\n  /**\r\n   *\r\n   *\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  invoke(ctx: Hemera, cb: Function) {\r\n\r\n    const each = (item, next, prevValue, i) => {\r\n\r\n      if (this._server) {\r\n\r\n        const response = ctx._response\r\n        response.next = next\r\n\r\n        item.call(ctx, ctx._request, response, next, prevValue, i);\r\n      } else {\r\n\r\n        item.call(ctx, next, i);\r\n      }\r\n\r\n    }\r\n\r\n    Extension.serial(this._stack, each, cb.bind(ctx))\r\n\r\n  }\r\n  /**\r\n   *\r\n   *\r\n   * @param {Array<Function>} array\r\n   * @param {Function} method\r\n   * @param {Function} callback\r\n   *\r\n   * @memberOf Extension\r\n   */\r\n  static serial(array: Array<Function> , method: Function, callback: Function) {\r\n\r\n    if (!array.length) {\r\n\r\n      callback()\r\n    } else {\r\n\r\n      let i = 0;\r\n\r\n      const iterate = function (prevValue) {\r\n\r\n        const done = function (err, value, abort) {\r\n\r\n          if (err) {\r\n\r\n            callback(err)\r\n          } else if (value && abort) {\r\n\r\n            callback(null, value)\r\n          } else {\r\n\r\n            i = i + 1\r\n\r\n            if (i < array.length) {\r\n\r\n              iterate(value)\r\n            } else {\r\n\r\n              callback(null, value)\r\n            }\r\n          }\r\n        }\r\n\r\n        method(array[i], done, prevValue, i)\r\n      }\r\n\r\n      iterate()\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Extension\r\n"]}