{"version":3,"sources":["../lib/index.js"],"names":["DefaultExtensions","defaultConfig","timeout","debug","name","randomId","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_router","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","auth$","plugin$","options","attributes","trace$","request$","duration","parentId","timestamp","type","id","_shouldCrash","_topic","_replyTo","_request","_response","_pattern","_actMeta","_actCallback","_cleanPattern","_pluginRegistrations","_decorations","_root","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","serializers","code","signal","fatal","emit","close","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","isObject","pkg","pick","PLUGIN_NAME_REQUIRED","multiple","PLUGIN_ALREADY_REGISTERED","dependencies","forEach","dep","PLUGIN_DEPENDENCY_MISSING","PLUGIN_DEPENDENCY_NOT_FOUND","ctx","createContext","register","plugin","bind","parentPlugin","push","info","PLUGIN_ADDED","value","exit","prop","Error","DECORATION_ALREADY_DEFINED","OVERRIDE_BUILTIN_METHOD_NOT_ALLOWED","subclass","cb","driver","on","TRANSPORT_CONNECTED","each","item","next","length","serial","err","PLUGIN_REGISTRATION_ERROR","isFunction","call","result","message","meta","trace","request","payload","toObject","endTime","nowHrTime","m","_message","onServerPreResponseHandler","self","EXTENSION_ERROR","causedBy","rootCause","cause","_buildMessage","send","invoke","topic","subToMany","maxMessages","actionHandler","resp","BusinessError","BUSINESS_ERROR","pattern","app","finish","action","middleware","ADD_MIDDLEWARE_ERROR","ImplementationError","IMPLEMENTATION_ERROR","onServerPreRequestHandler","lookup","PATTERN_NOT_FOUND","PatternNotFound","replyTo","_isServer","subscribe","max","subId","unsubscribe","isString","NO_TOPIC_TO_SUBSCRIBE","origPattern","cloneDeep","schema","extractSchema","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","onClientPostRequestHandler","responseError","fromObject","responseErrorCause","sendRequestHandler","response","res","ParseError","PAYLOAD_PARSING_ERROR","FatalError","FATAL_ERROR","onPreRequestHandler","PUB_CALLBACK_REDUNDANT","optOptions","sid","sendRequest","handleTimeout","_prevContext","cleanFromSpecialVars","timeout$","timeoutHandler","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\n/**\n * Module Dependencies\n */\n\nimport EventEmitter from 'events'\nimport Bloomrun from 'bloomrun'\nimport Errio from 'errio'\nimport Hoek from 'hoek'\nimport Heavy from 'heavy'\nimport _ from 'lodash'\nimport Pino from 'pino'\nimport OnExit from 'signal-exit'\nimport TinySonic from 'tinysonic'\nimport SuperError from 'super-error'\n\nimport Errors from './errors'\nimport Constants from './constants'\nimport Extension from './extension'\nimport Util from './util'\nimport NatsTransport from './transport'\nimport * as DefaultExtensions from './extensions'\nimport DefaultEncoder from './encoder'\nimport DefaultDecoder from './decoder'\nimport ServerResponse from './serverResponse'\nimport ServerRequest from './serverRequest'\nimport ClientRequest from './clientRequest'\nimport ClientResponse from './clientResponse'\nimport Serializers from './serializer'\nimport Add from './add'\n\nvar defaultConfig = {\n  timeout: 2000,\n  debug: false,\n  name: 'hemera-' + Util.randomId(),\n  crashOnFatal: true,\n  logLevel: 'silent',\n  load: {\n    sampleInterval: 0\n  }\n}\n\n/**\n * @class Hemera\n */\nclass Hemera extends EventEmitter {\n\n  /**\n   * Creates an instance of Hemera\n   *\n   * @param {Nats} transport\n   * @param {Config} params\n   *\n   * @memberOf Hemera\n   */\n  constructor (transport, params) {\n    super()\n\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\n    this._router = Bloomrun()\n    this._heavy = new Heavy(this._config.load)\n    this._transport = new NatsTransport({\n      transport\n    })\n    this._topics = {}\n    this._exposition = {}\n\n    // special variables for the new execution context\n    this.context$ = {}\n    this.meta$ = {}\n    this.delegate$ = {}\n    this.auth$ = {}\n    this.plugin$ = {\n      options: {},\n      attributes: {\n        name: 'core'\n      }\n    }\n    this.trace$ = {}\n    this.request$ = {\n      duration: 0,\n      parentId: '',\n      timestamp: 0,\n      type: 'request',\n      id: ''\n    }\n\n    // client and server locales\n    this._shouldCrash = false\n    this._topic = ''\n    this._replyTo = ''\n    this._request = null\n    this._response = null\n    this._pattern = null\n    this._actMeta = null\n    this._actCallback = null\n    this._cleanPattern = ''\n    this._pluginRegistrations = []\n    this._decorations = {}\n    // create reference to root hemera instance\n    this._root = this\n\n    // contains the list of all registered plugins\n    // the core is also a plugin\n    this._plugins = {\n      core: this.plugin$.attributes\n    }\n\n    this._encoder = {\n      encode: DefaultEncoder.encode\n    }\n    this._decoder = {\n      decode: DefaultDecoder.decode\n    }\n\n    // define extension points\n    this._extensions = {\n      onClientPreRequest: new Extension('onClientPreRequest'),\n      onClientPostRequest: new Extension('onClientPostRequest'),\n      onServerPreHandler: new Extension('onServerPreHandler', true),\n      onServerPreRequest: new Extension('onServerPreRequest', true),\n      onServerPreResponse: new Extension('onServerPreResponse', true)\n    }\n\n    // start tracking process stats\n    this._heavy.start()\n\n    // will be executed before the client request is executed.\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\n    // will be executed after the client received and decoded the request\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\n    // will be executed before the server received the requests\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\n    // will be executed before the server action is executed\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\n    // will be executed before the server reply the response and build the message\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\n\n    // use own logger\n    if (this._config.logger) {\n      this.log = this._config.logger\n    } else {\n      let pretty = Pino.pretty()\n\n      // Leads to too much listeners in tests\n      if (this._config.logLevel !== 'silent') {\n        pretty.pipe(process.stdout)\n      }\n\n      this.log = Pino({\n        name: this._config.name,\n        safe: true, // avoid error caused by circular references\n        level: this._config.logLevel,\n        serializers: Serializers\n      }, pretty)\n    }\n\n    // no matter how a process exits log and fire event\n    OnExit((code, signal) => {\n      this.log.fatal({\n        code,\n        signal\n      }, 'process exited')\n      this.emit('teardown', {\n        code,\n        signal\n      })\n      this.close()\n    })\n  }\n\n  /**\n   * Return all registered plugins\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get plugins () {\n    return this._plugins\n  }\n\n  /**\n   * Return the bloomrun instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get router () {\n    return this._router\n  }\n\n  /**\n   * Return the heavy instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get load () {\n    return this._heavy.load\n  }\n\n  /**\n   * Return the shared object of all exposed data\n   *\n   * @readonly\n   * @type {Exposition}\n   * @memberOf Hemera\n   */\n  get exposition () {\n    return this._exposition\n  }\n\n  /**\n   * Exposed data in context of the current plugin\n   * It is accessible by this.expositions[<plugin>][<key>]\n   *\n   * @param {string} key\n   * @param {mixed} object\n   *\n   * @memberOf Hemera\n   */\n  expose (key, object) {\n    let pluginName = this.plugin$.attributes.name\n\n    if (!this._exposition[pluginName]) {\n      this._exposition[pluginName] = {}\n      this._exposition[pluginName][key] = object\n    } else {\n      this._exposition[pluginName][key] = object\n    }\n  }\n\n  /**\n   * Return the underlying NATS driver\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get transport () {\n    return this._transport.driver\n  }\n\n  /**\n   * Return all registered topics\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get topics () {\n    return this._topics\n  }\n\n  /**\n   * Add an extension. Extensions are called in serie\n   *\n   * @param {any} type\n   * @param {any} handler\n   *\n   * @memberOf Hemera\n   */\n  ext (type, handler) {\n    if (!this._extensions[type]) {\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\n        type\n      })\n      this.log.error(error)\n      throw (error)\n    }\n\n    this._extensions[type].add(handler)\n  }\n\n  /**\n   * Use a plugin.\n   *\n   * @param {any} plugin\n   *\n   * @memberOf Hemera\n   */\n  use (params, options) {\n    // use plugin infos from package.json\n    if (_.isObject(params.attributes.pkg)) {\n      params.attributes = params.attributes || {}\n      params.attributes = Hoek.applyToDefaults(params.attributes, _.pick(params.attributes.pkg, ['name', 'description', 'version']))\n    }\n\n    // pass options as second argument during plugin registration\n    if (_.isObject(options)) {\n      params.options = params.options || {}\n      params.options = Hoek.applyToDefaults(params.options, options)\n    }\n\n    // plugin name is required\n    if (!params.attributes.name) {\n      let error = new Errors.HemeraError(Constants.PLUGIN_NAME_REQUIRED)\n      this.log.error(error)\n      throw (error)\n    }\n\n    // check if plugin is already registered\n    if (this._plugins[params.attributes.name]) {\n      // check for `multiple` attribute that when set to true tells hemera that it is safe to register your plugin more than once\n      if (params.attributes.multiple !== true) {\n        let error = new Errors.HemeraError(Constants.PLUGIN_ALREADY_REGISTERED, params.attributes.name)\n        this.log.error(error)\n        throw (error)\n      }\n    }\n\n    // check plugin dependenciess\n    if (params.attributes.dependencies) {\n      params.attributes.dependencies.forEach((dep) => {\n        if (!this._plugins[dep]) {\n          this.log.error(Constants.PLUGIN_DEPENDENCY_MISSING, params.attributes.name, dep, dep)\n          throw new Errors.HemeraError(Constants.PLUGIN_DEPENDENCY_NOT_FOUND)\n        }\n      })\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx.plugin$ = {}\n    ctx.plugin$.register = params.plugin.bind(ctx)\n    ctx.plugin$.attributes = params.attributes || {}\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\n    ctx.plugin$.parentPlugin = this.plugin$.attributes.name\n    ctx.plugin$.options = params.options || {}\n\n    this._pluginRegistrations.push(ctx.plugin$)\n\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\n    this._plugins[params.attributes.name] = ctx.plugin$\n  }\n\n  /**\n   * Change the current plugin configuration\n   * e.g to set the payload validator\n   *\n   * @param {any} options\n   *\n   * @memberOf Hemera\n   */\n  setOption (key, value) {\n    this.plugin$.options[key] = value\n  }\n\n  /**\n   * Change the base configuration.\n   *\n   *\n   * @memberOf Hemera\n   */\n  setConfig (key, value) {\n    this._config[key] = value\n  }\n\n  /**\n   *\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get config () {\n    return this._config\n  }\n  /**\n   * Exit the process\n   *\n   * @memberOf Hemera\n   */\n  fatal () {\n    this.close()\n\n    process.exit(1)\n  }\n\n  /**\n   * Create a custom super error object without to start hemera\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  static createError (name) {\n    return SuperError.subclass(name)\n  }\n\n  /**\n   * Decorate the current context with a method or other value\n   *\n   * @param {any} prop\n   * @param {any} value\n   *\n   * @memberOf Hemera\n   */\n  decorate (prop, value) {\n    if (this._decorations[prop]) {\n      throw new Error(Constants.DECORATION_ALREADY_DEFINED)\n    } else if (this[prop]) {\n      throw new Error(Constants.OVERRIDE_BUILTIN_METHOD_NOT_ALLOWED)\n    }\n\n    this._decorations[prop] = { plugin: this.plugin$, value }\n    // decorate root hemera instance\n    this._root[prop] = value\n  }\n\n  /**\n   * Create a custom super error object in a running hemera instance\n   *\n   * @param {any} name\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  createError (name) {\n    return SuperError.subclass(name)\n  }\n\n  /**\n   * Return all hemera errors\n   *\n   * @readonly\n   * @static\n   *\n   * @memberOf Hemera\n   */\n  static get errors () {\n    return Errors\n  }\n\n  /**\n   *\n   *\n   * @param {Function} cb\n   *\n   * @memberOf Hemera\n   */\n  ready (cb) {\n    this._transport.driver.on('connect', () => {\n      this.log.info(Constants.TRANSPORT_CONNECTED)\n\n      const each = (item, next) => {\n        if (item.register.length < 2) {\n          item.register(item.options)\n          return next()\n        }\n        item.register(item.options, next)\n      }\n\n      Util.serial(this._pluginRegistrations, each, (err) => {\n        if (err) {\n          let error = new Errors.HemeraError(Constants.PLUGIN_REGISTRATION_ERROR)\n          this.log.error(error)\n          throw (error)\n        }\n        if (_.isFunction(cb)) {\n          cb.call(this)\n        }\n      })\n    })\n  }\n\n  /**\n   * Build the final payload for the response\n   *\n   *\n   * @memberOf Hemera\n   */\n  _buildMessage () {\n    let result = this._response\n\n    let message = {\n      meta: this.meta$ || {},\n      trace: this.trace$ || {},\n      request: this.request$,\n      result: result.error ? null : result.payload,\n      error: result.error ? Errio.toObject(result.error) : null\n    }\n\n    let endTime = Util.nowHrTime()\n    message.request.duration = endTime - message.request.timestamp\n    message.trace.duration = endTime - message.request.timestamp\n\n    let m = this._encoder.encode.call(this, message)\n\n    // attach encoding issues\n    if (m.error) {\n      message.error = Errio.toObject(m.error)\n      message.result = null\n    }\n\n    // final response\n    this._message = m.value\n  }\n\n  /**\n   * Last step before the response is send to the callee.\n   * The preResponse extension is invoked and previous errors are evaluated.\n   *\n   * @memberOf Hemera\n   */\n  finish () {\n    function onServerPreResponseHandler (err, value) {\n      const self = this\n\n      // check if an error was already wrapped\n      if (self._response.error) {\n        self.emit('serverResponseError', self._response.error)\n        self.log.error(self._response.error)\n      } else if (err) { // check for an extension error\n        if (err instanceof SuperError) {\n          // try to get rootCause then cause and last the thrown error\n          self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err.rootCause || err.cause || err)\n        } else {\n          self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        }\n\n        self.emit('serverResponseError', self._response.error)\n        self.log.error(self._response.error)\n      }\n\n      // reply value from extension\n      if (value) {\n        self._response.payload = value\n      }\n\n      // create message payload\n      self._buildMessage()\n\n      // indicates that an error occurs and that the program should exit\n      if (self._shouldCrash) {\n        // only when we have an inbox othwerwise exit the service immediately\n        if (self._replyTo) {\n          // send error back to callee\n          return self._transport.send(self._replyTo, self._message, () => {\n            // let it crash\n            if (self._config.crashOnFatal) {\n              self.fatal()\n            }\n          })\n        } else if (self._config.crashOnFatal) {\n          return self.fatal()\n        }\n      }\n\n      // reply only when we have an inbox\n      if (self._replyTo) {\n        return this._transport.send(this._replyTo, self._message)\n      }\n    }\n\n    this._extensions.onServerPreResponse.invoke(this, onServerPreResponseHandler)\n  }\n\n  /**\n   * Attach one handler to the topic subscriber.\n   * With subToMany and maxMessages you control NATS specific behaviour.\n   *\n   * @param {string} topic\n   * @param {boolean} subToMany\n   * @param {number} maxMessages\n   *\n   * @memberOf Hemera\n   */\n  subscribe (topic, subToMany, maxMessages) {\n    const self = this\n\n    // avoid duplicate subscribers of the emit stream\n    // we use one subscriber per topic\n    if (self._topics[topic]) {\n      return\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @param {any} resp\n     * @returns\n     */\n    function actionHandler (err, resp) {\n      const self = this\n\n      if (err) {\n        if (err instanceof SuperError) {\n          // try to get rootCause then cause and last the thrown error\n          self._response.error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\n            pattern: self._pattern,\n            app: self._config.name\n          }).causedBy(err.rootCause || err.cause || err)\n        } else {\n          self._response.error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\n            pattern: self._pattern,\n            app: self._config.name\n          }).causedBy(err)\n        }\n\n        return self.finish()\n      }\n\n      // assign action result\n      self._response.payload = resp\n      // delete error we have payload\n      self._response.error = null\n\n      self.finish()\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @param {any} value\n     * @returns\n     */\n    function onServerPreHandler (err, value) {\n      const self = this\n\n      if (err) {\n        if (err instanceof SuperError) {\n          // try to get rootCause then cause and last the thrown error\n          self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err.rootCause || err.cause || err)\n        } else {\n          self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        }\n\n        self.log.error(self._response.error)\n\n        return self.finish()\n      }\n\n      // reply value from extension\n      if (value) {\n        self._response.payload = value\n        return self.finish()\n      }\n\n      try {\n        let action = self._actMeta.action.bind(self)\n\n        // execute add middlewares\n        Util.serial(self._actMeta.middleware, (item, next) => {\n          item(self._request, self._response, next)\n        }, (err) => {\n          // middleware error\n          if (err) {\n            if (err instanceof SuperError) {\n              // try to get rootCause then cause and last the thrown error\n              self._response.error = new Errors.HemeraError(Constants.ADD_MIDDLEWARE_ERROR).causedBy(err.rootCause || err.cause || err)\n            } else {\n              self._response.error = new Errors.HemeraError(Constants.ADD_MIDDLEWARE_ERROR).causedBy(err)\n            }\n            self.log.error(self._response.error)\n            return self.finish()\n          }\n\n          // if request type is 'pubsub' we dont have to reply back\n          if (self._request.payload.request.type === 'pubsub') {\n            action(self._request.payload.pattern)\n            return self.finish()\n          }\n\n          // execute RPC action\n          action(self._request.payload.pattern, actionHandler.bind(self))\n        })\n      } catch (err) {\n        // try to get rootCause then cause and last the thrown error\n        if (err instanceof SuperError) {\n          self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\n            pattern: self._pattern\n          }).causedBy(err.rootCause || err.cause || err)\n        } else {\n          self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\n            pattern: self._pattern\n          }).causedBy(err)\n        }\n\n        // service should exit\n        self._shouldCrash = true\n\n        self.finish()\n      }\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @param {any} value\n     * @returns\n     */\n    function onServerPreRequestHandler (err, value) {\n      let self = this\n\n      if (err) {\n        if (err instanceof SuperError) {\n          // try to get rootCause then cause and last the thrown error\n          self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err.rootCause || err.cause || err)\n        } else {\n          self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        }\n\n        return self.finish()\n      }\n\n      // reply value from extension\n      if (value) {\n        self._response.payload = value\n        return self.finish()\n      }\n\n      // find matched route\n      self._pattern = self._request.payload.pattern\n      self._actMeta = self._router.lookup(self._pattern)\n\n      // check if a handler is registered with this pattern\n      if (self._actMeta) {\n        self._extensions.onServerPreHandler.invoke(self, onServerPreHandler)\n      } else {\n        self.log.info({\n          topic: self._topic\n        }, Constants.PATTERN_NOT_FOUND)\n\n        self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\n          pattern: self._pattern\n        })\n\n        // send error back to callee\n        self.finish()\n      }\n    }\n\n    let handler = (request, replyTo) => {\n      // create new execution context\n      let ctx = this.createContext()\n      ctx._shouldCrash = false\n      ctx._replyTo = replyTo\n      ctx._topic = topic\n      ctx._request = new ServerRequest(request)\n      ctx._response = new ServerResponse()\n      ctx._pattern = {}\n      ctx._actMeta = {}\n      ctx._isServer = true\n\n      ctx._extensions.onServerPreRequest.invoke(ctx, onServerPreRequestHandler)\n    }\n\n    // standard pubsub with optional max proceed messages\n    if (subToMany) {\n      self._topics[topic] = self._transport.subscribe(topic, {\n        max: maxMessages\n      }, handler)\n    } else {\n      // queue group names allow load balancing of services\n      self._topics[topic] = self._transport.subscribe(topic, {\n        'queue': 'queue.' + topic,\n        max: maxMessages\n      }, handler)\n    }\n  }\n\n  /**\n   * Unsubscribe a topic from NATS\n   *\n   * @param {any} topic\n   * @param {any} maxMessages\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  remove (topic, maxMessages) {\n    const self = this\n    const subId = self._topics[topic]\n    if (subId) {\n      self._transport.unsubscribe(subId, maxMessages)\n      // release topic\n      delete self._topics[topic]\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * The topic is subscribed on NATS and can be called from any client.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  add (pattern, cb) {\n    // check for use quick syntax for JSON objects\n    if (_.isString(pattern)) {\n      pattern = TinySonic(pattern)\n    }\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    let origPattern = _.cloneDeep(pattern)\n    let schema = Util.extractSchema(origPattern)\n    origPattern = Util.cleanPattern(origPattern)\n\n    // create message object which represent the object behind the matched pattern\n    let actMeta = new Add({\n      schema: schema,\n      pattern: origPattern,\n      action: cb,\n      plugin: this.plugin$\n    })\n\n    let handler = this._router.lookup(origPattern)\n\n    // check if pattern is already registered\n    if (handler) {\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    // add to bloomrun\n    this._router.add(origPattern, actMeta)\n\n    this.log.info(origPattern, Constants.ADD_ADDED)\n\n    // subscribe on topic\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\n\n    return actMeta\n  }\n\n  /**\n   * Start an action.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  act (pattern, cb) {\n    // check for use quick syntax for JSON objects\n    if (_.isString(pattern)) {\n      pattern = TinySonic(pattern)\n    }\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @returns\n     */\n    function onClientPostRequestHandler (err) {\n      const self = this\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('clientResponseError', error)\n        self.log.error(error)\n\n        if (self._actCallback) {\n          return self._actCallback(error)\n        }\n\n        return\n      }\n\n      if (self._actCallback) {\n        if (self._response.payload.error) {\n          let responseError = Errio.fromObject(self._response.payload.error)\n          let responseErrorCause = responseError.cause\n          let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\n            pattern: self._cleanPattern\n          }).causedBy(responseErrorCause ? responseError.cause : responseError)\n          self.emit('clientResponseError', error)\n          self.log.error(error)\n\n          return self._actCallback(responseError)\n        }\n\n        self._actCallback(null, self._response.payload.result)\n      }\n    }\n\n    /**\n     *\n     *\n     * @param {any} response\n     * @returns\n     */\n    function sendRequestHandler (response) {\n      const self = this\n      const res = self._decoder.decode.call(self, response)\n      self._response.payload = res.value\n      self._response.error = res.error\n\n      try {\n        // if payload is invalid\n        if (self._response.error) {\n          let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\n            pattern: self._cleanPattern\n          }).causedBy(self._response.error)\n          self.emit('clientResponseError', error)\n          self.log.error(error)\n\n          if (self._actCallback) {\n            return self._actCallback(error)\n          }\n        }\n\n        self._extensions.onClientPostRequest.invoke(self, onClientPostRequestHandler)\n      } catch (err) {\n        let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n          pattern: self._cleanPattern\n        }).causedBy(err)\n        self.emit('clientResponseError', error)\n        self.log.fatal(error)\n\n        // let it crash\n        if (self._config.crashOnFatal) {\n          self.fatal()\n        }\n      }\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @returns\n     */\n    function onPreRequestHandler (err) {\n      const self = this\n\n      let m = self._encoder.encode.call(self, self._message)\n\n      // throw encoding issue\n      if (m.error) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\n        self.emit('clientResponseError', error)\n        self.log.error(error)\n\n        if (self._actCallback) {\n          return self._actCallback(error)\n        }\n\n        return\n      }\n\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('clientResponseError', error)\n        self.log.error(error)\n\n        if (self._actCallback) {\n          return self._actCallback(error)\n        }\n\n        return\n      }\n\n      self._request.payload = m.value\n      self._request.error = m.error\n\n      // use simple publish mechanism instead of request/reply\n      if (pattern.pubsub$ === true) {\n        if (self._actCallback) {\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\n        }\n\n        self._transport.send(pattern.topic, self._request.payload)\n      } else {\n        const optOptions = {}\n        // limit on the number of responses the requestor may receive\n        optOptions.max = ctx._pattern.maxMessages$ || 1\n        // send request\n        let sid = self._transport.sendRequest(pattern.topic, self._request.payload, optOptions, sendRequestHandler.bind(self))\n\n        // handle timeout\n        self.handleTimeout(sid, pattern)\n      }\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx._pattern = pattern\n    ctx._prevContext = this\n    ctx._actCallback = _.isFunction(cb) ? cb.bind(ctx) : null\n    ctx._cleanPattern = Util.cleanFromSpecialVars(pattern)\n    ctx._response = new ClientResponse()\n    ctx._request = new ClientRequest()\n    ctx._isServer = false\n\n    ctx._extensions.onClientPreRequest.invoke(ctx, onPreRequestHandler)\n  }\n\n  /**\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\n   * - No one was connected at the time (service unavailable)\n   * - Service is actually still processing the request (service takes too long)\n   * - Service was processing the request but crashed (service error)\n   *\n   * @param {any} sid\n   * @param {any} pattern\n   *\n   * @memberOf Hemera\n   */\n  handleTimeout (sid, pattern) {\n    const timeout = pattern.timeout$ || this._config.timeout\n\n    function onClientPostRequestHandler (err) {\n      const self = this\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('clientResponseError', error)\n        self._response.error = error\n        self.log.error(self._response.error)\n      }\n\n      if (self._actCallback) {\n        try {\n          self._actCallback(self._response.error)\n        } catch (err) {\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n            pattern\n          }).causedBy(err)\n          self.emit('clientResponseError', error)\n          self.log.fatal(error)\n\n          // let it crash\n          if (self._config.crashOnFatal) {\n            self.fatal()\n          }\n        }\n      }\n    }\n\n    let timeoutHandler = () => {\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\n        pattern\n      })\n      this.emit('clientResponseError', error)\n      this.log.error(error)\n      this._response.error = error\n      this._extensions.onClientPostRequest.invoke(this, onClientPostRequestHandler)\n    }\n\n    this._transport.timeout(sid, timeout, 1, timeoutHandler)\n  }\n\n  /**\n   * Create new instance of hemera but with pointer on the previous propertys\n   * so we are able to create a scope per act without lossing the reference to the core api.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  createContext () {\n    var self = this\n\n    var ctx = Object.create(self)\n\n    return ctx\n  }\n\n  /**\n   * Return the list of all registered actions\n   *\n   * @param {any} pattern\n   * @param {any} options\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  list (pattern, options) {\n    return this._router.list(pattern, options)\n  }\n\n  /**\n   * Close the process watcher and the underlying transort driver.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  close () {\n    this._heavy.stop()\n\n    return this._transport.close()\n  }\n}\n\nmodule.exports = Hemera\n"]}