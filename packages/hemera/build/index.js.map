{"version":3,"sources":["../lib/index.js"],"names":["defaultConfig","timeout","debug","name","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_catalog","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","plugin$","options","payloadValidator","attributes","trace$","request$","duration","parentId","timestamp","type","id","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","PLUGIN_ALREADY_IN_USE","plugin","ctx","createContext","dependencies","call","info","PLUGIN_ADDED","value","close","exit","cb","on","TRANSPORT_CONNECTED","isFunction","apply","arguments","publish","request","result","_response","message","meta","trace","toObject","endTime","nowHrTime","m","_message","self","invoke","err","EXTENSION_ERROR","causedBy","_buildMessage","_shouldCrash","_replyTo","send","fatal","topic","subToMany","maxMessages","replyTo","_request","_pattern","_actMeta","finish","requestType","pattern","lookup","action","bind","resp","BusinessError","IMPLEMENTATION_ERROR","ImplementationError","PATTERN_NOT_FOUND","PatternNotFound","subscribe","max","hasCallback","NO_TOPIC_TO_SUBSCRIBE","MISSING_IMPLEMENTATION","origPattern","cloneDeep","schema","each","v","k","isObject","clone","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","_prevContext","_cleanPattern","onPreRequest","PUB_CALLBACK_REDUNDANT","sid","sendRequest","response","ParseError","PAYLOAD_PARSING_ERROR","responseError","fromObject","responseErrorCause","cause","BUSINESS_ERROR","FatalError","FATAL_ERROR","handleTimeout","timeout$","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\n/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\n/**\n * Module Dependencies\n */\n\nimport EventEmitter from 'events'\nimport Bloomrun from 'bloomrun'\nimport Errio from 'errio'\nimport Hoek from 'hoek'\nimport Heavy from 'heavy'\nimport _ from 'lodash'\nimport Pino from 'pino'\n\nimport Errors from './errors'\nimport Constants from './constants'\nimport Extension from './extension'\nimport Util from './util'\nimport DefaultExtensions from './extensions'\nimport DefaultEncoder from './encoder'\nimport DefaultDecoder from './decoder'\n\nvar defaultConfig: Config = {\n  timeout: 2000,\n  debug: false,\n  name: 'app',\n  crashOnFatal: true,\n  logLevel: 'silent',\n  load: {\n    sampleInterval: 0\n  }\n}\n\n/**\n * @class Hemera\n */\nclass Hemera extends EventEmitter {\n\n  context$: Context;\n  meta$: Meta;\n  delegate$: Delegate;\n  plugin$: Plugin;\n  trace$: Trace;\n  request$: Request;\n\n  log: any;\n\n  _config: Config;\n  _catalog: any;\n  _heavy: any;\n  _transport: Nats;\n  _topics: {\n    [id: string]: boolean\n  };\n  _plugins: {\n    [id: string]: Plugin\n  };\n\n  _exposition: any;\n  _extensions: {\n    [id: string]: Ext\n  };\n  _shouldCrash: boolean;\n  _replyTo: string;\n  _request: any;\n  _response: any;\n  _pattern: any;\n  _actMeta: any;\n  _prevContext: Hemera;\n  _cleanPattern: any;\n  _message: any;\n\n  _encoder: Encoder;\n  _decoder: Decoder;\n\n\n  /**\n   * Creates an instance of Hemera\n   *\n   * @param {Nats} transport\n   * @param {Config} params\n   *\n   * @memberOf Hemera\n   */\n  constructor(transport: Nats, params: Config) {\n\n    super()\n\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\n    this._catalog = Bloomrun()\n    this._heavy = new Heavy(this._config.load)\n    this._transport = transport\n    this._topics = {}\n    this._exposition = {}\n\n    // special variables for the new execution context\n    this.context$ = {}\n    this.meta$ = {}\n    this.delegate$ = {}\n    this.plugin$ = {\n      options: {\n        payloadValidator: ''\n      },\n      attributes: {\n        name: 'core'\n      }\n    }\n    this.trace$ = {}\n    this.request$ = {\n      duration: 0,\n      parentId: '',\n      timestamp: 0,\n      type: 'request',\n      id: ''\n    }\n\n    // contains the list of all registered plugins\n    // the core is a plugin to\n    this._plugins = {\n      core: this.plugin$.attributes\n    }\n\n    this._encoder = {\n      encode: DefaultEncoder.encode\n    }\n    this._decoder = {\n      decode: DefaultDecoder.decode\n    }\n\n    // define extension points\n    this._extensions = {\n      onClientPreRequest: new Extension('onClientPreRequest'),\n      onClientPostRequest: new Extension('onClientPostRequest'),\n      onServerPreHandler: new Extension('onServerPreHandler', true),\n      onServerPreRequest: new Extension('onServerPreRequest', true),\n      onServerPreResponse: new Extension('onServerPreResponse', true)\n    }\n\n    // start tracking process stats\n    this._heavy.start()\n\n    // will be executed before the client request is executed.\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\n    // will be executed after the client received and decoded the request\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\n    // will be executed before the server received the requests\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\n    // will be executed before the server action is executed\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\n    // will be executed before the server reply the response and build the message\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\n\n    // use own logger\n    if (this._config.logger) {\n\n      this.log = this._config.logger\n    } else {\n\n      let pretty = Pino.pretty()\n\n      //Leads to too much listeners in tests\n      if (this._config.logLevel !== 'silent') {\n        pretty.pipe(process.stdout)\n      }\n\n      this.log = Pino({\n        name: this._config.name,\n        safe: true,\n        level: this._config.logLevel\n      }, pretty)\n    }\n  }\n\n  /**\n   * Return all registered plugins\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get plugins(): {\n    [id: string]: any\n  } {\n\n    return this._plugins\n  }\n\n  /**\n   * Return the bloomrun instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get catalog(): any {\n\n    return this._catalog\n  }\n\n  /**\n   * Return the heavy instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get load(): any {\n\n    return this._heavy.load\n  }\n\n  /**\n   * Return the shared object of all exposed data\n   *\n   * @readonly\n   * @type {Exposition}\n   * @memberOf Hemera\n   */\n  get exposition(): any {\n\n    return this._exposition\n  }\n\n  /**\n   * Exposed data in context of the current plugin\n   * Is accessible by this.expositions[<plugin>][<key>]\n   *\n   * @param {string} key\n   * @param {mixed} object\n   *\n   * @memberOf Hemera\n   */\n  expose(key: string, object: mixed) {\n\n    let pluginName = this.plugin$.attributes.name\n\n    if (!this._exposition[pluginName]) {\n\n      this._exposition[pluginName] = {}\n      this._exposition[pluginName][key] = object\n    } else {\n\n      this._exposition[pluginName][key] = object\n    }\n\n  }\n\n  /**\n   * Return the underlying NATS driver\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get transport(): Nats {\n\n    return this._transport\n  }\n\n  /**\n   * Return all registered topics\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get topics(): {\n    [id: string]: any\n  } {\n    return this._topics\n  }\n\n  /**\n   * Add an extension. Extensions are called in serie and can only pass an error\n   * You can work with the current context manipulate something\n   *\n   * @param {any} type\n   * @param {any} handler\n   *\n   * @memberOf Hemera\n   */\n  ext(type: string, handler: Function): void {\n\n    if (!this._extensions[type]) {\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\n        type\n      })\n      this.log.error(error)\n      throw (error)\n    }\n\n    this._extensions[type].add(handler)\n\n  }\n\n  /**\n   * Use a plugin.\n   *\n   * @param {any} plugin\n   *\n   * @memberOf Hemera\n   */\n  use(params: PluginDefinition) {\n\n    if (this._plugins[params.attributes.name]) {\n      let error = new Errors.HemeraError(Constants.PLUGIN_ALREADY_IN_USE, {\n        plugin: params.attributes.name\n      })\n      this.log.error(error)\n      throw (error)\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx.plugin$ = {}\n    ctx.plugin$.attributes = params.attributes || {}\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\n    ctx.plugin$.options = params.options || {}\n    ctx.plugin$.options.payloadValidator = params.options.payloadValidator || ''\n\n    params.plugin.call(ctx, params.options)\n\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\n    this._plugins[params.attributes.name] = ctx.plugin$.attributes\n\n  }\n\n  /**\n   * Change the current plugin configuration\n   * e.g to set the payload validator\n   *\n   * @param {any} options\n   *\n   * @memberOf Hemera\n   */\n  setOption(key: string, value: any) {\n\n    this.plugin$.options[key] = value\n  }\n\n  /**\n   * Change the base configuration.\n   *\n   *\n   * @memberOf Hemera\n   */\n  setConfig(key: string, value: any) {\n\n    this._config[key] = value\n  }\n\n  /**\n   * Exit the process\n   *\n   * @memberOf Hemera\n   */\n  fatal() {\n\n    this.close()\n\n    process.exit(1)\n  }\n\n  /**\n   *\n   *\n   * @param {Function} cb\n   *\n   * @memberOf Hemera\n   */\n  ready(cb: Function) {\n\n    this._transport.on('connect', () => {\n\n      this.log.info(Constants.TRANSPORT_CONNECTED)\n\n      if (_.isFunction(cb)) {\n        cb.call(this)\n      }\n\n    })\n  }\n\n  /**\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  timeout() {\n\n    return this.transport.timeout.apply(this.transport, arguments)\n  }\n  /**\n   * Publishing with the NATS driver\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  send() {\n\n    return this.transport.publish.apply(this.transport, arguments)\n  }\n\n  /**\n   * Send request with the NATS driver\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  sendRequest() {\n\n    return this.transport.request.apply(this.transport, arguments)\n  }\n\n  /**\n   * Build the final payload for the response\n   *\n   *\n   * @memberOf Hemera\n   */\n  _buildMessage() {\n\n    let result: Response = this._response\n\n    let message: Message = {\n      meta: this.meta$ || {},\n      trace: this.trace$ || {},\n      request: this.request$,\n      result: result.error ? null : result.value,\n      error: result.error ? Errio.toObject(result.error) : null\n    }\n\n    let endTime: number = Util.nowHrTime()\n    message.request.duration = endTime - message.request.timestamp\n    message.trace.duration = endTime - message.request.timestamp\n\n    let m = this._encoder.encode.call(this, message)\n\n    // attach encoding issues\n    if (m.error) {\n\n      message.error = Errio.toObject(m.error)\n      message.result = null\n    }\n\n    // final response\n    this._message = m.value\n\n  }\n\n  /**\n   * Last step before the response is send to the callee.\n   * The preResponse extension is invoked and previous errors are evaluated.\n   *\n   * @memberOf Hemera\n   */\n  finish() {\n\n    let self: Hemera = this;\n\n    self._extensions.onServerPreResponse.invoke(self, function (err: Error, value: any) {\n\n      // check if an error was already catched\n      if (self._response.error) {\n\n        self.log.error(self._response.error)\n      }\n      // check for an extension error\n      else if (err) {\n\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self._response.error = error\n        self.log.error(self._response.error)\n      }\n\n      if (value) {\n\n        self._response.value = value\n      }\n\n      // create message payload\n      self._buildMessage()\n\n      // indicates that an error occurs and that the program should exit\n      if (self._shouldCrash) {\n\n        // only when we have an inbox othwerwise exit the service immediately\n        if (self._replyTo) {\n\n          // send error back to callee\n          return self.send(self._replyTo, self._message, () => {\n\n            // let it crash\n            if (self._config.crashOnFatal) {\n\n              self.fatal()\n            }\n          })\n\n        } else if (self._config.crashOnFatal) {\n\n          return self.fatal()\n        }\n\n      }\n\n      // reply only when we have an inbox\n      if (self._replyTo) {\n\n        return this.send(this._replyTo, self._message)\n      }\n\n    })\n\n  }\n\n  /**\n   * Attach one handler to the topic subscriber.\n   * With subToMany and maxMessages you control NATS specific behaviour.\n   *\n   * @param {string} topic\n   * @param {boolean} subToMany\n   * @param {number} maxMessages\n   *\n   * @memberOf Hemera\n   */\n  subscribe(topic: string, subToMany: boolean, maxMessages: number) {\n\n    let self: Hemera = this\n\n    // avoid duplicate subscribers of the emit stream\n    // we use one subscriber per topic\n    if (self._topics[topic]) {\n      return\n    }\n\n    let handler = (request: any, replyTo: string) => {\n\n      // create new execution context\n      let ctx = this.createContext()\n      ctx._shouldCrash = false\n      ctx._replyTo = replyTo\n      ctx._request = request\n      ctx._response = {}\n      ctx._pattern = {}\n      ctx._actMeta = {}\n\n      self._extensions.onServerPreRequest.invoke(ctx, function (err: Error, value: any) {\n\n        let self: Hemera = this\n\n        if (err) {\n\n          let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n          self.log.error(error)\n          self._response.error = error\n\n          return self.finish()\n        }\n\n        if (value) {\n\n          ctx._response.value = value\n          return self.finish()\n        }\n\n        // find matched RPC\n        let requestType = self._request.value.request.type\n        self._pattern = self._request.value.pattern\n        self._actMeta = self._catalog.lookup(self._pattern)\n\n        // check if a handler is registered with this pattern\n        if (self._actMeta) {\n\n          self._extensions.onServerPreHandler.invoke(ctx, function (err: Error, value: any) {\n\n            if (err) {\n\n              self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n\n              self.log.error(self._response.error)\n\n              return self.finish()\n            }\n\n            if (value) {\n\n              ctx._response.value = value\n              return self.finish()\n            }\n\n            try {\n\n              let action = self._actMeta.action.bind(self)\n\n              // if request type is 'pubsub' we dont have to reply back\n              if (requestType === 'pubsub') {\n\n                action(self._request.value.pattern)\n\n                return self.finish()\n              }\n\n              // execute RPC action\n              action(self._request.value.pattern, (err: Error, resp) => {\n\n                if (err) {\n\n                  self._response.error = new Errors.BusinessError(Constants.IMPLEMENTATION_ERROR, {\n                    pattern: self._pattern\n                  }).causedBy(err)\n\n                  return self.finish()\n                }\n\n                // assign action result\n                self._response.value = resp\n\n                self.finish()\n              })\n\n            } catch (err) {\n\n              self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\n                pattern: self._pattern\n              }).causedBy(err)\n\n              // service should exit\n              self._shouldCrash = true\n\n              self.finish()\n            }\n\n          })\n\n        } else {\n\n          self.log.info({\n            topic\n          }, Constants.PATTERN_NOT_FOUND)\n\n          self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\n            pattern: self._pattern\n          })\n\n          // send error back to callee\n          self.finish()\n        }\n\n      })\n\n    }\n\n    // standard pubsub with optional max proceed messages\n    if (subToMany) {\n\n      self.transport.subscribe(topic, {\n        max: maxMessages\n      }, handler)\n    } else {\n\n      // queue group names allow load balancing of services\n      self.transport.subscribe(topic, {\n        'queue': 'queue.' + topic,\n        max: maxMessages\n      }, handler)\n    }\n\n    this._topics[topic] = true\n\n  }\n\n  /**\n   * The topic is subscribed on NATS and can be called from any client.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  add(pattern: {\n    [id: string]: any\n  }, cb: Function) {\n\n    let hasCallback = _.isFunction(cb)\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    if (!hasCallback) {\n\n      let error = new Errors.HemeraError(Constants.MISSING_IMPLEMENTATION, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    let origPattern = _.cloneDeep(pattern)\n\n    let schema = {}\n\n    // remove objects (rules) from pattern and extract schema\n    _.each(pattern, function (v: string, k: any) {\n\n      if (_.isObject(v)) {\n        schema[k] = _.clone(v)\n        delete origPattern[k]\n      }\n    })\n\n    // remove special $ variables from pattern\n    origPattern = Util.cleanPattern(origPattern)\n\n    // create message object which represent the object behind the matched pattern\n    let actMeta: ActMeta = {\n      schema: schema,\n      pattern: origPattern,\n      action: cb,\n      plugin: this.plugin$\n    }\n\n    let handler = this._catalog.lookup(origPattern)\n\n    // check if pattern is already registered\n    if (handler) {\n\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    // add to bloomrun\n    this._catalog.add(origPattern, actMeta)\n\n    this.log.info(origPattern, Constants.ADD_ADDED)\n\n    // subscribe on topic\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\n  }\n\n  /**\n   * Start an action.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  act(pattern: {\n    [id: string]: number\n  }, cb: Function) {\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx._pattern = pattern\n    ctx._prevContext = this\n    ctx._cleanPattern = Util.cleanPattern(pattern)\n    ctx._response = {}\n    ctx._request = {}\n\n    ctx._extensions.onClientPreRequest.invoke(ctx, function onPreRequest(err: Error) {\n\n      let self: Hemera = this\n\n      let hasCallback = _.isFunction(cb)\n\n      let m = self._encoder.encode.call(self, self._message)\n\n      // throw encoding issue\n      if (m.error) {\n\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\n\n        self.log.error(error)\n\n        if (hasCallback) {\n          return cb.call(self, error)\n        }\n\n        return\n      }\n\n      if (err) {\n\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n\n        self.log.error(error)\n\n        if (hasCallback) {\n          return cb.call(self, error)\n        }\n\n        return\n      }\n\n      ctx._request = m.value\n\n      // use simple publish mechanism instead to fire a request\n      if (pattern.pubsub$ === true) {\n\n        if (hasCallback) {\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\n        }\n\n        self.send(pattern.topic, self._request)\n      } else {\n\n        // send request\n        let sid = self.sendRequest(pattern.topic, self._request, (response: any) => {\n\n          self._response = self._decoder.decode.call(ctx, response)\n\n          try {\n\n            // if payload is invalid\n            if (self._response.error) {\n\n              let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\n                pattern: self._cleanPattern\n              }).causedBy(self._response.error)\n\n              self.log.error(error)\n\n              if (hasCallback) {\n                return cb.call(self, error)\n              }\n            }\n\n            self._extensions.onClientPostRequest.invoke(ctx, function (err: Error) {\n\n              if (err) {\n\n                let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n\n                self.log.error(error)\n\n                if (hasCallback) {\n                  return cb.call(self, error)\n                }\n\n                return\n              }\n\n              if (hasCallback) {\n\n                if (self._response.value.error) {\n\n                  let responseError = Errio.fromObject(self._response.value.error)\n                  let responseErrorCause = responseError.cause\n                  let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\n                    pattern: self._cleanPattern\n                  }).causedBy(responseErrorCause ? responseError.cause : responseError)\n\n                  self.log.error(error)\n\n                  return cb.call(self, responseError)\n                }\n\n                cb.apply(self, [null, self._response.value.result])\n              }\n\n            })\n\n          } catch (err) {\n\n            let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n              pattern: self._cleanPattern\n            }).causedBy(err)\n\n            self.log.fatal(error)\n\n            // let it crash\n            if (self._config.crashOnFatal) {\n\n              self.fatal()\n            }\n          }\n        })\n\n        // handle timeout\n        self.handleTimeout(sid, pattern, cb)\n      }\n\n    })\n\n  }\n\n  /**\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\n   * - No one was connected at the time (service unavailable)\n   * - Service is actually still processing the request (service takes too long)\n   * - Service was processing the request but crashed (service error)\n   *\n   * @param {any} sid\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  handleTimeout(sid: number, pattern: {\n    [id: string]: number\n  }, cb: Function) {\n\n    // handle timeout\n    this.timeout(sid, pattern.timeout$ || this._config.timeout, 1, () => {\n\n      let hasCallback = _.isFunction(cb)\n\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\n        pattern\n      })\n\n      this.log.error(error)\n\n      if (hasCallback) {\n\n        try {\n\n          cb.call(this, error)\n        } catch (err) {\n\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n            pattern\n          }).causedBy(err)\n\n          this.log.fatal(error)\n\n          // let it crash\n          if (this._config.crashOnFatal) {\n\n            this.fatal()\n          }\n        }\n      }\n    })\n  }\n\n  /**\n   * Create new instance of hemera but with pointer on the previous propertys\n   * so we are able to create a scope per act without lossing the reference to the core api.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  createContext() {\n\n    var self = this\n\n    var ctx: Hemera = Object.create(self)\n\n    return ctx\n  }\n\n  /**\n   * Return the list of all registered actions\n   *\n   * @memberOf Hemera\n   */\n  list(params: any) {\n\n    return this._catalog.list(params)\n  }\n\n  /**\n   * Close the process watcher and the underlying transort driver.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  close() {\n\n    this._heavy.stop()\n\n    return this.transport.close()\n  }\n}\n\nmodule.exports = Hemera\n"]}