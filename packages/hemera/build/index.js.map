{"version":3,"sources":["../lib/index.js"],"names":["DefaultExtensions","defaultConfig","timeout","debug","name","randomId","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_router","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","auth$","plugin$","options","attributes","trace$","request$","duration","parentId","timestamp","type","id","_shouldCrash","_topic","_replyTo","_request","_response","_pattern","_actMeta","_actCallback","_cleanPattern","_pluginRegistrations","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","serializers","code","signal","fatal","emit","close","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","isObject","pkg","pick","PLUGIN_NAME_REQUIRED","multiple","PLUGIN_ALREADY_REGISTERED","dependencies","forEach","dep","PLUGIN_DEPENDENCY_MISSING","PLUGIN_DEPENDENCY_NOT_FOUND","ctx","createContext","register","plugin","bind","parentPlugin","push","info","PLUGIN_ADDED","value","exit","cb","driver","on","TRANSPORT_CONNECTED","each","item","next","length","serial","err","PLUGIN_REGISTRATION_ERROR","isFunction","call","result","message","meta","trace","request","payload","toObject","endTime","nowHrTime","m","_message","onServerPreResponseHandler","self","EXTENSION_ERROR","causedBy","_buildMessage","send","invoke","topic","subToMany","maxMessages","actionHandler","resp","BusinessError","BUSINESS_ERROR","pattern","finish","action","middleware","ADD_MIDDLEWARE_ERROR","ImplementationError","IMPLEMENTATION_ERROR","onServerPreRequestHandler","lookup","PATTERN_NOT_FOUND","PatternNotFound","replyTo","subscribe","max","unsubscribe","isString","NO_TOPIC_TO_SUBSCRIBE","origPattern","cloneDeep","schema","extractSchema","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","onClientPostRequestHandler","responseError","fromObject","responseErrorCause","cause","sendRequestHandler","response","res","ParseError","PAYLOAD_PARSING_ERROR","FatalError","FATAL_ERROR","onPreRequestHandler","PUB_CALLBACK_REDUNDANT","optOptions","sid","sendRequest","handleTimeout","_prevContext","cleanFromSpecialVars","timeout$","timeoutHandler","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*!\r\n * hemera\r\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module Dependencies\r\n */\r\n\r\nimport EventEmitter from 'events'\r\nimport Bloomrun from 'bloomrun'\r\nimport Errio from 'errio'\r\nimport Hoek from 'hoek'\r\nimport Heavy from 'heavy'\r\nimport _ from 'lodash'\r\nimport Pino from 'pino'\r\nimport OnExit from 'signal-exit'\r\nimport TinySonic from 'tinysonic'\r\n\r\nimport Errors from './errors'\r\nimport Constants from './constants'\r\nimport Extension from './extension'\r\nimport Util from './util'\r\nimport NatsTransport from './transport'\r\nimport * as DefaultExtensions from './extensions'\r\nimport DefaultEncoder from './encoder'\r\nimport DefaultDecoder from './decoder'\r\nimport ServerResponse from './serverResponse'\r\nimport ServerRequest from './serverRequest'\r\nimport ClientRequest from './clientRequest'\r\nimport ClientResponse from './clientResponse'\r\nimport Serializers from './serializer'\r\nimport Add from './add'\r\n\r\nvar defaultConfig = {\r\n  timeout: 2000,\r\n  debug: false,\r\n  name: 'hemera-' + Util.randomId(),\r\n  crashOnFatal: true,\r\n  logLevel: 'silent',\r\n  load: {\r\n    sampleInterval: 0\r\n  }\r\n}\r\n\r\n/**\r\n * @class Hemera\r\n */\r\nclass Hemera extends EventEmitter {\r\n\r\n  /**\r\n   * Creates an instance of Hemera\r\n   *\r\n   * @param {Nats} transport\r\n   * @param {Config} params\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  constructor (transport, params) {\r\n    super()\r\n\r\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\r\n    this._router = Bloomrun()\r\n    this._heavy = new Heavy(this._config.load)\r\n    this._transport = new NatsTransport({\r\n      transport\r\n    })\r\n    this._topics = {}\r\n    this._exposition = {}\r\n\r\n    // special variables for the new execution context\r\n    this.context$ = {}\r\n    this.meta$ = {}\r\n    this.delegate$ = {}\r\n    this.auth$ = {}\r\n    this.plugin$ = {\r\n      options: {},\r\n      attributes: {\r\n        name: 'core'\r\n      }\r\n    }\r\n    this.trace$ = {}\r\n    this.request$ = {\r\n      duration: 0,\r\n      parentId: '',\r\n      timestamp: 0,\r\n      type: 'request',\r\n      id: ''\r\n    }\r\n\r\n    // client and server locales\r\n    this._shouldCrash = false\r\n    this._topic = ''\r\n    this._replyTo = ''\r\n    this._request = null\r\n    this._response = null\r\n    this._pattern = null\r\n    this._actMeta = null\r\n    this._actCallback = null\r\n    this._cleanPattern = ''\r\n    this._pluginRegistrations = []\r\n\r\n    // contains the list of all registered plugins\r\n    // the core is also a plugin\r\n    this._plugins = {\r\n      core: this.plugin$.attributes\r\n    }\r\n\r\n    this._encoder = {\r\n      encode: DefaultEncoder.encode\r\n    }\r\n    this._decoder = {\r\n      decode: DefaultDecoder.decode\r\n    }\r\n\r\n    // define extension points\r\n    this._extensions = {\r\n      onClientPreRequest: new Extension('onClientPreRequest'),\r\n      onClientPostRequest: new Extension('onClientPostRequest'),\r\n      onServerPreHandler: new Extension('onServerPreHandler', true),\r\n      onServerPreRequest: new Extension('onServerPreRequest', true),\r\n      onServerPreResponse: new Extension('onServerPreResponse', true)\r\n    }\r\n\r\n    // start tracking process stats\r\n    this._heavy.start()\r\n\r\n    // will be executed before the client request is executed.\r\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\r\n    // will be executed after the client received and decoded the request\r\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\r\n    // will be executed before the server received the requests\r\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\r\n    // will be executed before the server action is executed\r\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\r\n    // will be executed before the server reply the response and build the message\r\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\r\n\r\n    // use own logger\r\n    if (this._config.logger) {\r\n      this.log = this._config.logger\r\n    } else {\r\n      let pretty = Pino.pretty()\r\n\r\n      // Leads to too much listeners in tests\r\n      if (this._config.logLevel !== 'silent') {\r\n        pretty.pipe(process.stdout)\r\n      }\r\n\r\n      this.log = Pino({\r\n        name: this._config.name,\r\n        safe: true, // avoid error caused by circular references\r\n        level: this._config.logLevel,\r\n        serializers: Serializers\r\n      }, pretty)\r\n    }\r\n\r\n    // no matter how a process exits log and fire event\r\n    OnExit((code, signal) => {\r\n      this.log.fatal({\r\n        code,\r\n        signal\r\n      }, 'process exited')\r\n      this.emit('teardown', {\r\n        code,\r\n        signal\r\n      })\r\n      this.close()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Return all registered plugins\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get plugins () {\r\n    return this._plugins\r\n  }\r\n\r\n  /**\r\n   * Return the bloomrun instance\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get router () {\r\n    return this._router\r\n  }\r\n\r\n  /**\r\n   * Return the heavy instance\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get load () {\r\n    return this._heavy.load\r\n  }\r\n\r\n  /**\r\n   * Return the shared object of all exposed data\r\n   *\r\n   * @readonly\r\n   * @type {Exposition}\r\n   * @memberOf Hemera\r\n   */\r\n  get exposition () {\r\n    return this._exposition\r\n  }\r\n\r\n  /**\r\n   * Exposed data in context of the current plugin\r\n   * It is accessible by this.expositions[<plugin>][<key>]\r\n   *\r\n   * @param {string} key\r\n   * @param {mixed} object\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  expose (key, object) {\r\n    let pluginName = this.plugin$.attributes.name\r\n\r\n    if (!this._exposition[pluginName]) {\r\n      this._exposition[pluginName] = {}\r\n      this._exposition[pluginName][key] = object\r\n    } else {\r\n      this._exposition[pluginName][key] = object\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the underlying NATS driver\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get transport () {\r\n    return this._transport.driver\r\n  }\r\n\r\n  /**\r\n   * Return all registered topics\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get topics () {\r\n    return this._topics\r\n  }\r\n\r\n  /**\r\n   * Add an extension. Extensions are called in serie\r\n   *\r\n   * @param {any} type\r\n   * @param {any} handler\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  ext (type, handler) {\r\n    if (!this._extensions[type]) {\r\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\r\n        type\r\n      })\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    this._extensions[type].add(handler)\r\n  }\r\n\r\n  /**\r\n   * Use a plugin.\r\n   *\r\n   * @param {any} plugin\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  use (params, options) {\r\n    // use plugin infos from package.json\r\n    if (_.isObject(params.attributes.pkg)) {\r\n      params.attributes = params.attributes || {}\r\n      params.attributes = Hoek.applyToDefaults(params.attributes, _.pick(params.attributes.pkg, ['name', 'description', 'version']))\r\n    }\r\n\r\n    // pass options as second argument during plugin registration\r\n    if (_.isObject(options)) {\r\n      params.options = params.options || {}\r\n      params.options = Hoek.applyToDefaults(params.options, options)\r\n    }\r\n\r\n    // plugin name is required\r\n    if (!params.attributes.name) {\r\n      let error = new Errors.HemeraError(Constants.PLUGIN_NAME_REQUIRED)\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    // check if plugin is already registered\r\n    if (this._plugins[params.attributes.name]) {\r\n      // check for `multiple` attribute that when set to true tells hemera that it is safe to register your plugin more than once\r\n      if (params.attributes.multiple !== true) {\r\n        let error = new Errors.HemeraError(Constants.PLUGIN_ALREADY_REGISTERED, params.attributes.name)\r\n        this.log.error(error)\r\n        throw (error)\r\n      }\r\n    }\r\n\r\n    // check plugin dependenciess\r\n    if (params.attributes.dependencies) {\r\n      params.attributes.dependencies.forEach((dep) => {\r\n        if (!this._plugins[dep]) {\r\n          this.log.error(Constants.PLUGIN_DEPENDENCY_MISSING, params.attributes.name, dep, dep)\r\n          throw new Errors.HemeraError(Constants.PLUGIN_DEPENDENCY_NOT_FOUND)\r\n        }\r\n      })\r\n    }\r\n\r\n    // create new execution context\r\n    let ctx = this.createContext()\r\n    ctx.plugin$ = {}\r\n    ctx.plugin$.register = params.plugin.bind(ctx)\r\n    ctx.plugin$.attributes = params.attributes || {}\r\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\r\n    ctx.plugin$.parentPlugin = this.plugin$.attributes.name\r\n    ctx.plugin$.options = params.options || {}\r\n\r\n    this._pluginRegistrations.push(ctx.plugin$)\r\n\r\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\r\n    this._plugins[params.attributes.name] = ctx.plugin$\r\n  }\r\n\r\n  /**\r\n   * Change the current plugin configuration\r\n   * e.g to set the payload validator\r\n   *\r\n   * @param {any} options\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  setOption (key, value) {\r\n    this.plugin$.options[key] = value\r\n  }\r\n\r\n  /**\r\n   * Change the base configuration.\r\n   *\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  setConfig (key, value) {\r\n    this._config[key] = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get config () {\r\n    return this._config\r\n  }\r\n  /**\r\n   * Exit the process\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  fatal () {\r\n    this.close()\r\n\r\n    process.exit(1)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Function} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  ready (cb) {\r\n    this._transport.driver.on('connect', () => {\r\n      this.log.info(Constants.TRANSPORT_CONNECTED)\r\n\r\n      const each = (item, next) => {\r\n        if (item.register.length < 2) {\r\n          item.register(item.options)\r\n          return next()\r\n        }\r\n        item.register(item.options, next)\r\n      }\r\n\r\n      Util.serial(this._pluginRegistrations, each, (err) => {\r\n        if (err) {\r\n          let error = new Errors.HemeraError(Constants.PLUGIN_REGISTRATION_ERROR)\r\n          this.log.error(error)\r\n          throw (error)\r\n        }\r\n        if (_.isFunction(cb)) {\r\n          cb.call(this)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Build the final payload for the response\r\n   *\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  _buildMessage () {\r\n    let result = this._response\r\n\r\n    let message = {\r\n      meta: this.meta$ || {},\r\n      trace: this.trace$ || {},\r\n      request: this.request$,\r\n      result: result.error ? null : result.payload,\r\n      error: result.error ? Errio.toObject(result.error) : null\r\n    }\r\n\r\n    let endTime = Util.nowHrTime()\r\n    message.request.duration = endTime - message.request.timestamp\r\n    message.trace.duration = endTime - message.request.timestamp\r\n\r\n    let m = this._encoder.encode.call(this, message)\r\n\r\n    // attach encoding issues\r\n    if (m.error) {\r\n      message.error = Errio.toObject(m.error)\r\n      message.result = null\r\n    }\r\n\r\n    // final response\r\n    this._message = m.value\r\n  }\r\n\r\n  /**\r\n   * Last step before the response is send to the callee.\r\n   * The preResponse extension is invoked and previous errors are evaluated.\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  finish () {\r\n    function onServerPreResponseHandler (err, value) {\r\n      const self = this\r\n\r\n      // check if an error was already catched\r\n      if (self._response.error) {\r\n        self.emit('serverResponseError', self._response.error)\r\n        self.log.error(self._response.error)\r\n      } else if (err) { // check for an extension error\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.emit('serverResponseError', error)\r\n        self._response.error = error\r\n        self.log.error(self._response.error)\r\n      }\r\n\r\n      // reply value from extension\r\n      if (value) {\r\n        self._response.payload = value\r\n      }\r\n\r\n      // create message payload\r\n      self._buildMessage()\r\n\r\n      // indicates that an error occurs and that the program should exit\r\n      if (self._shouldCrash) {\r\n        // only when we have an inbox othwerwise exit the service immediately\r\n        if (self._replyTo) {\r\n          // send error back to callee\r\n          return self._transport.send(self._replyTo, self._message, () => {\r\n            // let it crash\r\n            if (self._config.crashOnFatal) {\r\n              self.fatal()\r\n            }\r\n          })\r\n        } else if (self._config.crashOnFatal) {\r\n          return self.fatal()\r\n        }\r\n      }\r\n\r\n      // reply only when we have an inbox\r\n      if (self._replyTo) {\r\n        return this._transport.send(this._replyTo, self._message)\r\n      }\r\n    }\r\n\r\n    this._extensions.onServerPreResponse.invoke(this, onServerPreResponseHandler)\r\n  }\r\n\r\n  /**\r\n   * Attach one handler to the topic subscriber.\r\n   * With subToMany and maxMessages you control NATS specific behaviour.\r\n   *\r\n   * @param {string} topic\r\n   * @param {boolean} subToMany\r\n   * @param {number} maxMessages\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  subscribe (topic, subToMany, maxMessages) {\r\n    const self = this\r\n\r\n    // avoid duplicate subscribers of the emit stream\r\n    // we use one subscriber per topic\r\n    if (self._topics[topic]) {\r\n      return\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @param {any} resp\r\n     * @returns\r\n     */\r\n    function actionHandler (err, resp) {\r\n      const self = this\r\n\r\n      if (err) {\r\n        self._response.error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\r\n          pattern: self._pattern\r\n        }).causedBy(err)\r\n\r\n        return self.finish()\r\n      }\r\n\r\n      // assign action result\r\n      self._response.payload = resp\r\n      // delete error we have payload\r\n      self._response.error = null\r\n\r\n      self.finish()\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @param {any} value\r\n     * @returns\r\n     */\r\n    function onServerPreHandler (err, value) {\r\n      const self = this\r\n\r\n      if (err) {\r\n        self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.log.error(self._response.error)\r\n\r\n        return self.finish()\r\n      }\r\n\r\n      // reply value from extension\r\n      if (value) {\r\n        self._response.payload = value\r\n        return self.finish()\r\n      }\r\n\r\n      try {\r\n        let action = self._actMeta.action.bind(self)\r\n\r\n        // execute add middlewares\r\n        Util.serial(self._actMeta.middleware, (item, next) => {\r\n          item(self._request, self._response, next)\r\n        }, (err) => {\r\n          // middleware error\r\n          if (err) {\r\n            let error = new Errors.HemeraError(Constants.ADD_MIDDLEWARE_ERROR).causedBy(err)\r\n            self.log.error(error)\r\n            self._response.error = error\r\n            return self.finish()\r\n          }\r\n\r\n          // if request type is 'pubsub' we dont have to reply back\r\n          if (self._request.payload.request.type === 'pubsub') {\r\n            action(self._request.payload.pattern)\r\n            return self.finish()\r\n          }\r\n\r\n          // execute RPC action\r\n          action(self._request.payload.pattern, actionHandler.bind(self))\r\n        })\r\n      } catch (err) {\r\n        self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\r\n          pattern: self._pattern\r\n        }).causedBy(err)\r\n\r\n        // service should exit\r\n        self._shouldCrash = true\r\n\r\n        self.finish()\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @param {any} value\r\n     * @returns\r\n     */\r\n    function onServerPreRequestHandler (err, value) {\r\n      let self = this\r\n\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.log.error(error)\r\n        self._response.error = error\r\n\r\n        return self.finish()\r\n      }\r\n\r\n      // reply value from extension\r\n      if (value) {\r\n        self._response.payload = value\r\n        return self.finish()\r\n      }\r\n\r\n      // find matched route\r\n      self._pattern = self._request.payload.pattern\r\n      self._actMeta = self._router.lookup(self._pattern)\r\n\r\n      // check if a handler is registered with this pattern\r\n      if (self._actMeta) {\r\n        self._extensions.onServerPreHandler.invoke(self, onServerPreHandler)\r\n      } else {\r\n        self.log.info({\r\n          topic: self._topic\r\n        }, Constants.PATTERN_NOT_FOUND)\r\n\r\n        self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\r\n          pattern: self._pattern\r\n        })\r\n\r\n        // send error back to callee\r\n        self.finish()\r\n      }\r\n    }\r\n\r\n    let handler = (request, replyTo) => {\r\n      // create new execution context\r\n      let ctx = this.createContext()\r\n      ctx._shouldCrash = false\r\n      ctx._replyTo = replyTo\r\n      ctx._topic = topic\r\n      ctx._request = new ServerRequest(request)\r\n      ctx._response = new ServerResponse()\r\n      ctx._pattern = {}\r\n      ctx._actMeta = {}\r\n\r\n      ctx._extensions.onServerPreRequest.invoke(ctx, onServerPreRequestHandler)\r\n    }\r\n\r\n    // standard pubsub with optional max proceed messages\r\n    if (subToMany) {\r\n      self._topics[topic] = self._transport.subscribe(topic, {\r\n        max: maxMessages\r\n      }, handler)\r\n    } else {\r\n      // queue group names allow load balancing of services\r\n      self._topics[topic] = self._transport.subscribe(topic, {\r\n        'queue': 'queue.' + topic,\r\n        max: maxMessages\r\n      }, handler)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe a topic from NATS\r\n   *\r\n   * @param {any} topic\r\n   * @param {any} maxMessages\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  remove (topic, maxMessages) {\r\n    const self = this\r\n    if (self._topics[topic]) {\r\n      self._transport.unsubscribe(topic, maxMessages)\r\n      // release topic\r\n      delete self._topics[topic]\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * The topic is subscribed on NATS and can be called from any client.\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  add (pattern, cb) {\r\n    // check for use quick syntax for JSON objects\r\n    if (_.isString(pattern)) {\r\n      pattern = TinySonic(pattern)\r\n    }\r\n\r\n    // topic is needed to subscribe on a subject in NATS\r\n    if (!pattern.topic) {\r\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    let origPattern = _.cloneDeep(pattern)\r\n    let schema = Util.extractSchema(origPattern)\r\n    origPattern = Util.cleanPattern(origPattern)\r\n\r\n    // create message object which represent the object behind the matched pattern\r\n    let actMeta = new Add({\r\n      schema: schema,\r\n      pattern: origPattern,\r\n      action: cb,\r\n      plugin: this.plugin$\r\n    })\r\n\r\n    let handler = this._router.lookup(origPattern)\r\n\r\n    // check if pattern is already registered\r\n    if (handler) {\r\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    // add to bloomrun\r\n    this._router.add(origPattern, actMeta)\r\n\r\n    this.log.info(origPattern, Constants.ADD_ADDED)\r\n\r\n    // subscribe on topic\r\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\r\n\r\n    return actMeta\r\n  }\r\n\r\n  /**\r\n   * Start an action.\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  act (pattern, cb) {\r\n    // check for use quick syntax for JSON objects\r\n    if (_.isString(pattern)) {\r\n      pattern = TinySonic(pattern)\r\n    }\r\n\r\n    // topic is needed to subscribe on a subject in NATS\r\n    if (!pattern.topic) {\r\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @returns\r\n     */\r\n    function onClientPostRequestHandler (err) {\r\n      const self = this\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.emit('clientResponseError', error)\r\n        self.log.error(error)\r\n\r\n        if (self._actCallback) {\r\n          return self._actCallback(error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      if (self._actCallback) {\r\n        if (self._response.payload.error) {\r\n          let responseError = Errio.fromObject(self._response.payload.error)\r\n          let responseErrorCause = responseError.cause\r\n          let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\r\n            pattern: self._cleanPattern\r\n          }).causedBy(responseErrorCause ? responseError.cause : responseError)\r\n          self.emit('clientResponseError', error)\r\n          self.log.error(error)\r\n\r\n          return self._actCallback(responseError)\r\n        }\r\n\r\n        self._actCallback(null, self._response.payload.result)\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} response\r\n     * @returns\r\n     */\r\n    function sendRequestHandler (response) {\r\n      const self = this\r\n      const res = self._decoder.decode.call(self, response)\r\n      self._response.payload = res.value\r\n      self._response.error = res.error\r\n\r\n      try {\r\n        // if payload is invalid\r\n        if (self._response.error) {\r\n          let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\r\n            pattern: self._cleanPattern\r\n          }).causedBy(self._response.error)\r\n          self.emit('clientResponseError', error)\r\n          self.log.error(error)\r\n\r\n          if (self._actCallback) {\r\n            return self._actCallback(error)\r\n          }\r\n        }\r\n\r\n        self._extensions.onClientPostRequest.invoke(self, onClientPostRequestHandler)\r\n      } catch (err) {\r\n        let error = new Errors.FatalError(Constants.FATAL_ERROR, {\r\n          pattern: self._cleanPattern\r\n        }).causedBy(err)\r\n        self.emit('clientResponseError', error)\r\n        self.log.fatal(error)\r\n\r\n        // let it crash\r\n        if (self._config.crashOnFatal) {\r\n          self.fatal()\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @returns\r\n     */\r\n    function onPreRequestHandler (err) {\r\n      const self = this\r\n\r\n      let m = self._encoder.encode.call(self, self._message)\r\n\r\n      // throw encoding issue\r\n      if (m.error) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\r\n        self.emit('clientResponseError', error)\r\n        self.log.error(error)\r\n\r\n        if (self._actCallback) {\r\n          return self._actCallback(error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.emit('clientResponseError', error)\r\n        self.log.error(error)\r\n\r\n        if (self._actCallback) {\r\n          return self._actCallback(error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      self._request.payload = m.value\r\n      self._request.error = m.error\r\n\r\n      // use simple publish mechanism instead of request/reply\r\n      if (pattern.pubsub$ === true) {\r\n        if (self._actCallback) {\r\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\r\n        }\r\n\r\n        self._transport.send(pattern.topic, self._request.payload)\r\n      } else {\r\n        const optOptions = {}\r\n        // limit on the number of responses the requestor may receive\r\n        optOptions.max = ctx._pattern.maxMessages$ || 1\r\n        // send request\r\n        let sid = self._transport.sendRequest(pattern.topic, self._request.payload, optOptions, sendRequestHandler.bind(self))\r\n\r\n        // handle timeout\r\n        self.handleTimeout(sid, pattern)\r\n      }\r\n    }\r\n\r\n    // create new execution context\r\n    let ctx = this.createContext()\r\n    ctx._pattern = pattern\r\n    ctx._prevContext = this\r\n    ctx._actCallback = _.isFunction(cb) ? cb.bind(ctx) : null\r\n    ctx._cleanPattern = Util.cleanFromSpecialVars(pattern)\r\n    ctx._response = new ClientResponse()\r\n    ctx._request = new ClientRequest()\r\n\r\n    ctx._extensions.onClientPreRequest.invoke(ctx, onPreRequestHandler)\r\n  }\r\n\r\n  /**\r\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\r\n   * - No one was connected at the time (service unavailable)\r\n   * - Service is actually still processing the request (service takes too long)\r\n   * - Service was processing the request but crashed (service error)\r\n   *\r\n   * @param {any} sid\r\n   * @param {any} pattern\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  handleTimeout (sid, pattern) {\r\n    const timeout = pattern.timeout$ || this._config.timeout\r\n\r\n    function onClientPostRequestHandler (err) {\r\n      const self = this\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.emit('clientResponseError', error)\r\n        self._response.error = error\r\n        self.log.error(self._response.error)\r\n      }\r\n\r\n      if (self._actCallback) {\r\n        try {\r\n          self._actCallback(self._response.error)\r\n        } catch (err) {\r\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\r\n            pattern\r\n          }).causedBy(err)\r\n          self.emit('clientResponseError', error)\r\n          self.log.fatal(error)\r\n\r\n          // let it crash\r\n          if (self._config.crashOnFatal) {\r\n            self.fatal()\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let timeoutHandler = () => {\r\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\r\n        pattern\r\n      })\r\n      this.emit('clientResponseError', error)\r\n      this.log.error(error)\r\n      this._response.error = error\r\n      this._extensions.onClientPostRequest.invoke(this, onClientPostRequestHandler)\r\n    }\r\n\r\n    this._transport.timeout(sid, timeout, 1, timeoutHandler)\r\n  }\r\n\r\n  /**\r\n   * Create new instance of hemera but with pointer on the previous propertys\r\n   * so we are able to create a scope per act without lossing the reference to the core api.\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  createContext () {\r\n    var self = this\r\n\r\n    var ctx = Object.create(self)\r\n\r\n    return ctx\r\n  }\r\n\r\n  /**\r\n   * Return the list of all registered actions\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} options\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  list (pattern, options) {\r\n    return this._router.list(pattern, options)\r\n  }\r\n\r\n  /**\r\n   * Close the process watcher and the underlying transort driver.\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  close () {\r\n    this._heavy.stop()\r\n\r\n    return this._transport.close()\r\n  }\r\n}\r\n\r\nmodule.exports = Hemera\r\n"]}