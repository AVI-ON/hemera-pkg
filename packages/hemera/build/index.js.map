{"version":3,"sources":["../lib/index.js"],"names":["defaultConfig","timeout","debug","name","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_catalog","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","plugin$","options","payloadValidator","attributes","trace$","request$","duration","parentId","timestamp","type","id","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","PLUGIN_ALREADY_IN_USE","plugin","ctx","createContext","dependencies","call","info","PLUGIN_ADDED","value","close","exit","cb","on","TRANSPORT_CONNECTED","isFunction","apply","arguments","publish","request","result","_response","message","meta","trace","payload","toObject","endTime","nowHrTime","m","_message","self","invoke","err","EXTENSION_ERROR","causedBy","_buildMessage","_shouldCrash","_replyTo","send","fatal","topic","subToMany","maxMessages","replyTo","_request","_pattern","_actMeta","finish","requestType","pattern","lookup","action","bind","resp","BusinessError","IMPLEMENTATION_ERROR","ImplementationError","PATTERN_NOT_FOUND","PatternNotFound","subscribe","max","hasCallback","NO_TOPIC_TO_SUBSCRIBE","MISSING_IMPLEMENTATION","origPattern","cloneDeep","schema","each","v","k","isObject","clone","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","_prevContext","_cleanPattern","onPreRequest","PUB_CALLBACK_REDUNDANT","sid","sendRequest","response","res","ParseError","PAYLOAD_PARSING_ERROR","responseError","fromObject","responseErrorCause","cause","BUSINESS_ERROR","FatalError","FATAL_ERROR","handleTimeout","timeout$","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\r\n\r\n/*!\r\n * hemera\r\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module Dependencies\r\n */\r\n\r\nimport EventEmitter from 'events'\r\nimport Bloomrun from 'bloomrun'\r\nimport Errio from 'errio'\r\nimport Hoek from 'hoek'\r\nimport Heavy from 'heavy'\r\nimport _ from 'lodash'\r\nimport Pino from 'pino'\r\n\r\nimport Errors from './errors'\r\nimport Constants from './constants'\r\nimport Extension from './extension'\r\nimport Util from './util'\r\nimport DefaultExtensions from './extensions'\r\nimport DefaultEncoder from './encoder'\r\nimport DefaultDecoder from './decoder'\r\nimport ServerResponse from './serverResponse'\r\nimport ServerRequest from './serverRequest'\r\nimport ClientRequest from './clientRequest'\r\nimport ClientResponse from './clientResponse'\r\n\r\nvar defaultConfig: Config = {\r\n  timeout: 2000,\r\n  debug: false,\r\n  name: 'app',\r\n  crashOnFatal: true,\r\n  logLevel: 'silent',\r\n  load: {\r\n    sampleInterval: 0\r\n  }\r\n}\r\n\r\n/**\r\n * @class Hemera\r\n */\r\nclass Hemera extends EventEmitter {\r\n\r\n  context$: Context;\r\n  meta$: Meta;\r\n  delegate$: Delegate;\r\n  plugin$: Plugin;\r\n  trace$: Trace;\r\n  request$: Request;\r\n\r\n  log: any;\r\n\r\n  _config: Config;\r\n  _catalog: any;\r\n  _heavy: any;\r\n  _transport: Nats;\r\n  _topics: {\r\n    [id: string]: boolean\r\n  };\r\n  _plugins: {\r\n    [id: string]: Plugin\r\n  };\r\n\r\n  _exposition: any;\r\n  _extensions: {\r\n    [id: string]: Extension\r\n  };\r\n  _shouldCrash: boolean;\r\n  _replyTo: string;\r\n  _request: any;\r\n  _response: any;\r\n  _pattern: any;\r\n  _actMeta: any;\r\n  _prevContext: Hemera;\r\n  _cleanPattern: any;\r\n  _message: any;\r\n\r\n  _encoder: Encoder;\r\n  _decoder: Decoder;\r\n\r\n\r\n  /**\r\n   * Creates an instance of Hemera\r\n   *\r\n   * @param {Nats} transport\r\n   * @param {Config} params\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  constructor(transport: Nats, params: Config) {\r\n\r\n    super()\r\n\r\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\r\n    this._catalog = Bloomrun()\r\n    this._heavy = new Heavy(this._config.load)\r\n    this._transport = transport\r\n    this._topics = {}\r\n    this._exposition = {}\r\n\r\n    // special variables for the new execution context\r\n    this.context$ = {}\r\n    this.meta$ = {}\r\n    this.delegate$ = {}\r\n    this.plugin$ = {\r\n      options: {\r\n        payloadValidator: ''\r\n      },\r\n      attributes: {\r\n        name: 'core'\r\n      }\r\n    }\r\n    this.trace$ = {}\r\n    this.request$ = {\r\n      duration: 0,\r\n      parentId: '',\r\n      timestamp: 0,\r\n      type: 'request',\r\n      id: ''\r\n    }\r\n\r\n    // contains the list of all registered plugins\r\n    // the core is a plugin to\r\n    this._plugins = {\r\n      core: this.plugin$.attributes\r\n    }\r\n\r\n    this._encoder = {\r\n      encode: DefaultEncoder.encode\r\n    }\r\n    this._decoder = {\r\n      decode: DefaultDecoder.decode\r\n    }\r\n\r\n    // define extension points\r\n    this._extensions = {\r\n      onClientPreRequest: new Extension('onClientPreRequest'),\r\n      onClientPostRequest: new Extension('onClientPostRequest'),\r\n      onServerPreHandler: new Extension('onServerPreHandler', true),\r\n      onServerPreRequest: new Extension('onServerPreRequest', true),\r\n      onServerPreResponse: new Extension('onServerPreResponse', true)\r\n    }\r\n\r\n    // start tracking process stats\r\n    this._heavy.start()\r\n\r\n    // will be executed before the client request is executed.\r\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\r\n    // will be executed after the client received and decoded the request\r\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\r\n    // will be executed before the server received the requests\r\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\r\n    // will be executed before the server action is executed\r\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\r\n    // will be executed before the server reply the response and build the message\r\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\r\n\r\n    // use own logger\r\n    if (this._config.logger) {\r\n\r\n      this.log = this._config.logger\r\n    } else {\r\n\r\n      let pretty = Pino.pretty()\r\n\r\n      //Leads to too much listeners in tests\r\n      if (this._config.logLevel !== 'silent') {\r\n        pretty.pipe(process.stdout)\r\n      }\r\n\r\n      this.log = Pino({\r\n        name: this._config.name,\r\n        safe: true,\r\n        level: this._config.logLevel\r\n      }, pretty)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all registered plugins\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get plugins(): {\r\n    [id: string]: any\r\n  } {\r\n\r\n    return this._plugins\r\n  }\r\n\r\n  /**\r\n   * Return the bloomrun instance\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get catalog(): any {\r\n\r\n    return this._catalog\r\n  }\r\n\r\n  /**\r\n   * Return the heavy instance\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get load(): any {\r\n\r\n    return this._heavy.load\r\n  }\r\n\r\n  /**\r\n   * Return the shared object of all exposed data\r\n   *\r\n   * @readonly\r\n   * @type {Exposition}\r\n   * @memberOf Hemera\r\n   */\r\n  get exposition(): any {\r\n\r\n    return this._exposition\r\n  }\r\n\r\n  /**\r\n   * Exposed data in context of the current plugin\r\n   * Is accessible by this.expositions[<plugin>][<key>]\r\n   *\r\n   * @param {string} key\r\n   * @param {mixed} object\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  expose(key: string, object: mixed) {\r\n\r\n    let pluginName = this.plugin$.attributes.name\r\n\r\n    if (!this._exposition[pluginName]) {\r\n\r\n      this._exposition[pluginName] = {}\r\n      this._exposition[pluginName][key] = object\r\n    } else {\r\n\r\n      this._exposition[pluginName][key] = object\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Return the underlying NATS driver\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get transport(): Nats {\r\n\r\n    return this._transport\r\n  }\r\n\r\n  /**\r\n   * Return all registered topics\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get topics(): {\r\n    [id: string]: any\r\n  } {\r\n    return this._topics\r\n  }\r\n\r\n  /**\r\n   * Add an extension. Extensions are called in serie and can only pass an error\r\n   * You can work with the current context manipulate something\r\n   *\r\n   * @param {any} type\r\n   * @param {any} handler\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  ext(type: string, handler: Function): void {\r\n\r\n    if (!this._extensions[type]) {\r\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\r\n        type\r\n      })\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    this._extensions[type].add(handler)\r\n\r\n  }\r\n\r\n  /**\r\n   * Use a plugin.\r\n   *\r\n   * @param {any} plugin\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  use(params: PluginDefinition) {\r\n\r\n    if (this._plugins[params.attributes.name]) {\r\n      let error = new Errors.HemeraError(Constants.PLUGIN_ALREADY_IN_USE, {\r\n        plugin: params.attributes.name\r\n      })\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    // create new execution context\r\n    let ctx = this.createContext()\r\n    ctx.plugin$ = {}\r\n    ctx.plugin$.attributes = params.attributes || {}\r\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\r\n    ctx.plugin$.options = params.options || {}\r\n    ctx.plugin$.options.payloadValidator = params.options.payloadValidator || ''\r\n\r\n    params.plugin.call(ctx, params.options)\r\n\r\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\r\n    this._plugins[params.attributes.name] = ctx.plugin$.attributes\r\n\r\n  }\r\n\r\n  /**\r\n   * Change the current plugin configuration\r\n   * e.g to set the payload validator\r\n   *\r\n   * @param {any} options\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  setOption(key: string, value: any) {\r\n\r\n    this.plugin$.options[key] = value\r\n  }\r\n\r\n  /**\r\n   * Change the base configuration.\r\n   *\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  setConfig(key: string, value: any) {\r\n\r\n    this._config[key] = value\r\n  }\r\n\r\n  /**\r\n   * Exit the process\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  fatal() {\r\n\r\n    this.close()\r\n\r\n    process.exit(1)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Function} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  ready(cb: Function) {\r\n\r\n    this._transport.on('connect', () => {\r\n\r\n      this.log.info(Constants.TRANSPORT_CONNECTED)\r\n\r\n      if (_.isFunction(cb)) {\r\n        cb.call(this)\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  timeout() {\r\n\r\n    return this.transport.timeout.apply(this.transport, arguments)\r\n  }\r\n  /**\r\n   * Publishing with the NATS driver\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  send() {\r\n\r\n    return this.transport.publish.apply(this.transport, arguments)\r\n  }\r\n\r\n  /**\r\n   * Send request with the NATS driver\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  sendRequest() {\r\n\r\n    return this.transport.request.apply(this.transport, arguments)\r\n  }\r\n\r\n  /**\r\n   * Build the final payload for the response\r\n   *\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  _buildMessage() {\r\n\r\n    let result: ServerResponse = this._response\r\n\r\n    let message: Message = {\r\n      meta: this.meta$ || {},\r\n      trace: this.trace$ || {},\r\n      request: this.request$,\r\n      result: result.error ? null : result.payload,\r\n      error: result.error ? Errio.toObject(result.error) : null\r\n    }\r\n\r\n    let endTime: number = Util.nowHrTime()\r\n    message.request.duration = endTime - message.request.timestamp\r\n    message.trace.duration = endTime - message.request.timestamp\r\n\r\n    let m = this._encoder.encode.call(this, message)\r\n\r\n    // attach encoding issues\r\n    if (m.error) {\r\n\r\n      message.error = Errio.toObject(m.error)\r\n      message.result = null\r\n    }\r\n\r\n    // final response\r\n    this._message = m.value\r\n\r\n  }\r\n\r\n  /**\r\n   * Last step before the response is send to the callee.\r\n   * The preResponse extension is invoked and previous errors are evaluated.\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  finish() {\r\n\r\n    let self: Hemera = this;\r\n\r\n    self._extensions.onServerPreResponse.invoke(self, function (err: Error, value: any) {\r\n\r\n      // check if an error was already catched\r\n      if (self._response.error) {\r\n\r\n        self.log.error(self._response.error)\r\n      }\r\n      // check for an extension error\r\n      else if (err) {\r\n\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self._response.error = error\r\n        self.log.error(self._response.error)\r\n      }\r\n\r\n      if (value) {\r\n\r\n        self._response.payload = value\r\n      }\r\n\r\n      // create message payload\r\n      self._buildMessage()\r\n\r\n      // indicates that an error occurs and that the program should exit\r\n      if (self._shouldCrash) {\r\n\r\n        // only when we have an inbox othwerwise exit the service immediately\r\n        if (self._replyTo) {\r\n\r\n          // send error back to callee\r\n          return self.send(self._replyTo, self._message, () => {\r\n\r\n            // let it crash\r\n            if (self._config.crashOnFatal) {\r\n\r\n              self.fatal()\r\n            }\r\n          })\r\n\r\n        } else if (self._config.crashOnFatal) {\r\n\r\n          return self.fatal()\r\n        }\r\n\r\n      }\r\n\r\n      // reply only when we have an inbox\r\n      if (self._replyTo) {\r\n\r\n        return this.send(this._replyTo, self._message)\r\n      }\r\n\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Attach one handler to the topic subscriber.\r\n   * With subToMany and maxMessages you control NATS specific behaviour.\r\n   *\r\n   * @param {string} topic\r\n   * @param {boolean} subToMany\r\n   * @param {number} maxMessages\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  subscribe(topic: string, subToMany: boolean, maxMessages: number) {\r\n\r\n    let self: Hemera = this\r\n\r\n    // avoid duplicate subscribers of the emit stream\r\n    // we use one subscriber per topic\r\n    if (self._topics[topic]) {\r\n      return\r\n    }\r\n\r\n    let handler = (request: any, replyTo: string) => {\r\n\r\n      // create new execution context\r\n      let ctx: Hemera = this.createContext()\r\n      ctx._shouldCrash = false\r\n      ctx._replyTo = replyTo\r\n      ctx._request = new ServerRequest(ctx, request)\r\n      ctx._response = new ServerResponse(ctx)\r\n      ctx._pattern = {}\r\n      ctx._actMeta = {}\r\n\r\n      self._extensions.onServerPreRequest.invoke(ctx, function (err: Error, value: any) {\r\n\r\n        let self: Hemera = this\r\n\r\n        if (err) {\r\n\r\n          let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n          self.log.error(error)\r\n          self._response.error = error\r\n\r\n          return self.finish()\r\n        }\r\n\r\n        if (value) {\r\n\r\n          ctx._response.payload = value\r\n          return self.finish()\r\n        }\r\n\r\n        // find matched RPC\r\n        let requestType = self._request.payload.request.type\r\n        self._pattern = self._request.payload.pattern\r\n        self._actMeta = self._catalog.lookup(self._pattern)\r\n\r\n        // check if a handler is registered with this pattern\r\n        if (self._actMeta) {\r\n\r\n          self._extensions.onServerPreHandler.invoke(ctx, function (err: Error, value: any) {\r\n\r\n            if (err) {\r\n\r\n              self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n\r\n              self.log.error(self._response.error)\r\n\r\n              return self.finish()\r\n            }\r\n\r\n            if (value) {\r\n\r\n              ctx._response.payload = value\r\n              return self.finish()\r\n            }\r\n\r\n            try {\r\n\r\n              let action = self._actMeta.action.bind(self)\r\n\r\n              // if request type is 'pubsub' we dont have to reply back\r\n              if (requestType === 'pubsub') {\r\n\r\n                action(self._request.payload.pattern)\r\n\r\n                return self.finish()\r\n              }\r\n\r\n              // execute RPC action\r\n              action(self._request.payload.pattern, (err: Error, resp) => {\r\n\r\n                if (err) {\r\n\r\n                  self._response.error = new Errors.BusinessError(Constants.IMPLEMENTATION_ERROR, {\r\n                    pattern: self._pattern\r\n                  }).causedBy(err)\r\n\r\n                  return self.finish()\r\n                }\r\n\r\n                // assign action result\r\n                self._response.payload = resp\r\n\r\n                self.finish()\r\n              })\r\n\r\n            } catch (err) {\r\n\r\n              self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\r\n                pattern: self._pattern\r\n              }).causedBy(err)\r\n\r\n              // service should exit\r\n              self._shouldCrash = true\r\n\r\n              self.finish()\r\n            }\r\n\r\n          })\r\n\r\n        } else {\r\n\r\n          self.log.info({\r\n            topic\r\n          }, Constants.PATTERN_NOT_FOUND)\r\n\r\n          self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\r\n            pattern: self._pattern\r\n          })\r\n\r\n          // send error back to callee\r\n          self.finish()\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n\r\n    // standard pubsub with optional max proceed messages\r\n    if (subToMany) {\r\n\r\n      self.transport.subscribe(topic, {\r\n        max: maxMessages\r\n      }, handler)\r\n    } else {\r\n\r\n      // queue group names allow load balancing of services\r\n      self.transport.subscribe(topic, {\r\n        'queue': 'queue.' + topic,\r\n        max: maxMessages\r\n      }, handler)\r\n    }\r\n\r\n    this._topics[topic] = true\r\n\r\n  }\r\n\r\n  /**\r\n   * The topic is subscribed on NATS and can be called from any client.\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  add(pattern: {\r\n    [id: string]: any\r\n  }, cb: Function) {\r\n\r\n    let hasCallback = _.isFunction(cb)\r\n\r\n    // topic is needed to subscribe on a subject in NATS\r\n    if (!pattern.topic) {\r\n\r\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    if (!hasCallback) {\r\n\r\n      let error = new Errors.HemeraError(Constants.MISSING_IMPLEMENTATION, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    let origPattern = _.cloneDeep(pattern)\r\n\r\n    let schema = {}\r\n\r\n    // remove objects (rules) from pattern and extract schema\r\n    _.each(pattern, function (v: string, k: any) {\r\n\r\n      if (_.isObject(v)) {\r\n        schema[k] = _.clone(v)\r\n        delete origPattern[k]\r\n      }\r\n    })\r\n\r\n    // remove special $ variables from pattern\r\n    origPattern = Util.cleanPattern(origPattern)\r\n\r\n    // create message object which represent the object behind the matched pattern\r\n    let actMeta: ActMeta = {\r\n      schema: schema,\r\n      pattern: origPattern,\r\n      action: cb,\r\n      plugin: this.plugin$\r\n    }\r\n\r\n    let handler = this._catalog.lookup(origPattern)\r\n\r\n    // check if pattern is already registered\r\n    if (handler) {\r\n\r\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    // add to bloomrun\r\n    this._catalog.add(origPattern, actMeta)\r\n\r\n    this.log.info(origPattern, Constants.ADD_ADDED)\r\n\r\n    // subscribe on topic\r\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\r\n  }\r\n\r\n  /**\r\n   * Start an action.\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  act(pattern: {\r\n    [id: string]: number\r\n  }, cb: Function) {\r\n\r\n    // topic is needed to subscribe on a subject in NATS\r\n    if (!pattern.topic) {\r\n\r\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    // create new execution context\r\n    let ctx = this.createContext()\r\n    ctx._pattern = pattern\r\n    ctx._prevContext = this\r\n    ctx._cleanPattern = Util.cleanPattern(pattern)\r\n    ctx._response = new ClientResponse(ctx)\r\n    ctx._request = new ClientRequest(ctx)\r\n\r\n    ctx._extensions.onClientPreRequest.invoke(ctx, function onPreRequest(err: Error) {\r\n\r\n      let self: Hemera = this\r\n\r\n      let hasCallback = _.isFunction(cb)\r\n\r\n      let m = self._encoder.encode.call(self, self._message)\r\n\r\n      // throw encoding issue\r\n      if (m.error) {\r\n\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\r\n\r\n        self.log.error(error)\r\n\r\n        if (hasCallback) {\r\n          return cb.call(self, error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      if (err) {\r\n\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n\r\n        self.log.error(error)\r\n\r\n        if (hasCallback) {\r\n          return cb.call(self, error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      ctx._request.payload = m.value\r\n      ctx._request.error = m.error\r\n\r\n      // use simple publish mechanism instead to fire a request\r\n      if (pattern.pubsub$ === true) {\r\n\r\n        if (hasCallback) {\r\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\r\n        }\r\n\r\n        self.send(pattern.topic, self._request.payload)\r\n      } else {\r\n\r\n        // send request\r\n        let sid = self.sendRequest(pattern.topic, self._request.payload, (response: any) => {\r\n\r\n          let res = self._decoder.decode.call(ctx, response)\r\n          self._response.payload = res.value\r\n          self._response.error = res.error\r\n\r\n          try {\r\n\r\n            // if payload is invalid\r\n            if (self._response.error) {\r\n\r\n              let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\r\n                pattern: self._cleanPattern\r\n              }).causedBy(self._response.error)\r\n\r\n              self.log.error(error)\r\n\r\n              if (hasCallback) {\r\n                return cb.call(self, error)\r\n              }\r\n            }\r\n\r\n            self._extensions.onClientPostRequest.invoke(ctx, function (err: Error) {\r\n\r\n              if (err) {\r\n\r\n                let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n\r\n                self.log.error(error)\r\n\r\n                if (hasCallback) {\r\n                  return cb.call(self, error)\r\n                }\r\n\r\n                return\r\n              }\r\n\r\n              if (hasCallback) {\r\n\r\n                if (self._response.payload.error) {\r\n\r\n                  let responseError = Errio.fromObject(self._response.payload.error)\r\n                  let responseErrorCause = responseError.cause\r\n                  let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\r\n                    pattern: self._cleanPattern\r\n                  }).causedBy(responseErrorCause ? responseError.cause : responseError)\r\n\r\n                  self.log.error(error)\r\n\r\n                  return cb.call(self, responseError)\r\n                }\r\n\r\n                cb.apply(self, [null, self._response.payload.result])\r\n              }\r\n\r\n            })\r\n\r\n          } catch (err) {\r\n\r\n            let error = new Errors.FatalError(Constants.FATAL_ERROR, {\r\n              pattern: self._cleanPattern\r\n            }).causedBy(err)\r\n\r\n            self.log.fatal(error)\r\n\r\n            // let it crash\r\n            if (self._config.crashOnFatal) {\r\n\r\n              self.fatal()\r\n            }\r\n          }\r\n        })\r\n\r\n        // handle timeout\r\n        self.handleTimeout(sid, pattern, cb)\r\n      }\r\n\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\r\n   * - No one was connected at the time (service unavailable)\r\n   * - Service is actually still processing the request (service takes too long)\r\n   * - Service was processing the request but crashed (service error)\r\n   *\r\n   * @param {any} sid\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  handleTimeout(sid: number, pattern: {\r\n    [id: string]: number\r\n  }, cb: Function) {\r\n\r\n    // handle timeout\r\n    this.timeout(sid, pattern.timeout$ || this._config.timeout, 1, () => {\r\n\r\n      let hasCallback = _.isFunction(cb)\r\n\r\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n\r\n      if (hasCallback) {\r\n\r\n        try {\r\n\r\n          cb.call(this, error)\r\n        } catch (err) {\r\n\r\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\r\n            pattern\r\n          }).causedBy(err)\r\n\r\n          this.log.fatal(error)\r\n\r\n          // let it crash\r\n          if (this._config.crashOnFatal) {\r\n\r\n            this.fatal()\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create new instance of hemera but with pointer on the previous propertys\r\n   * so we are able to create a scope per act without lossing the reference to the core api.\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  createContext() {\r\n\r\n    var self = this\r\n\r\n    var ctx: Hemera = Object.create(self)\r\n\r\n    return ctx\r\n  }\r\n\r\n  /**\r\n   * Return the list of all registered actions\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  list(params: any) {\r\n\r\n    return this._catalog.list(params)\r\n  }\r\n\r\n  /**\r\n   * Close the process watcher and the underlying transort driver.\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  close() {\r\n\r\n    this._heavy.stop()\r\n\r\n    return this.transport.close()\r\n  }\r\n}\r\n\r\nmodule.exports = Hemera\r\n"]}