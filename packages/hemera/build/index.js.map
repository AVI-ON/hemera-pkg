{"version":3,"sources":["../lib/index.js"],"names":["defaultConfig","timeout","debug","name","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_router","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","plugin$","options","payloadValidator","attributes","trace$","request$","duration","parentId","timestamp","type","id","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","serializers","code","signal","fatal","emit","close","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","PLUGIN_ALREADY_IN_USE","plugin","ctx","createContext","dependencies","call","info","PLUGIN_ADDED","value","exit","cb","driver","on","TRANSPORT_CONNECTED","isFunction","result","_response","message","meta","trace","request","payload","toObject","endTime","nowHrTime","m","_message","self","invoke","err","EXTENSION_ERROR","causedBy","_buildMessage","_shouldCrash","_replyTo","send","topic","subToMany","maxMessages","replyTo","_request","_pattern","_actMeta","finish","requestType","pattern","lookup","action","bind","resp","BusinessError","IMPLEMENTATION_ERROR","ImplementationError","PATTERN_NOT_FOUND","PatternNotFound","subscribe","max","hasCallback","isString","NO_TOPIC_TO_SUBSCRIBE","MISSING_IMPLEMENTATION","origPattern","cloneDeep","schema","each","v","k","isObject","clone","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","_prevContext","_cleanPattern","onPreRequest","PUB_CALLBACK_REDUNDANT","sid","sendRequest","response","res","ParseError","PAYLOAD_PARSING_ERROR","responseError","fromObject","responseErrorCause","cause","BUSINESS_ERROR","apply","FatalError","FATAL_ERROR","handleTimeout","timeout$","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\n/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\n/**\n * Module Dependencies\n */\n\nimport EventEmitter from 'events'\nimport Bloomrun from 'bloomrun'\nimport Errio from 'errio'\nimport Hoek from 'hoek'\nimport Heavy from 'heavy'\nimport _ from 'lodash'\nimport Pino from 'pino'\nimport OnExit from 'signal-exit'\nimport TinySonic from 'tinysonic'\n\nimport Errors from './errors'\nimport Constants from './constants'\nimport Extension from './extension'\nimport Util from './util'\nimport NatsTransport from './transport'\nimport DefaultExtensions from './extensions'\nimport DefaultEncoder from './encoder'\nimport DefaultDecoder from './decoder'\nimport ServerResponse from './serverResponse'\nimport ServerRequest from './serverRequest'\nimport ClientRequest from './clientRequest'\nimport ClientResponse from './clientResponse'\nimport Serializers from './serializer'\n\nvar defaultConfig: Config = {\n  timeout: 2000,\n  debug: false,\n  name: 'app',\n  crashOnFatal: true,\n  logLevel: 'silent',\n  load: {\n    sampleInterval: 0\n  }\n}\n\n/**\n * @class Hemera\n */\nclass Hemera extends EventEmitter {\n\n  context$: Context;\n  meta$: Meta;\n  delegate$: Delegate;\n  plugin$: Plugin;\n  trace$: Trace;\n  request$: Request;\n\n  log: any;\n\n  _config: Config;\n  _router: any;\n  _heavy: any;\n  _transport: NatsTransport;\n  _topics: {\n    [id: string]: boolean\n  };\n  _plugins: {\n    [id: string]: Plugin\n  };\n\n  _exposition: any;\n  _extensions: {\n    [id: string]: Extension\n  };\n  _shouldCrash: boolean;\n  _replyTo: string;\n  _request: any;\n  _response: any;\n  _pattern: any;\n  _actMeta: any;\n  _prevContext: Hemera;\n  _cleanPattern: any;\n  _message: any;\n\n  _encoder: Encoder;\n  _decoder: Decoder;\n\n\n  /**\n   * Creates an instance of Hemera\n   *\n   * @param {Nats} transport\n   * @param {Config} params\n   *\n   * @memberOf Hemera\n   */\n  constructor(transport: Nats, params: Config) {\n\n    super()\n\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\n    this._router = Bloomrun()\n    this._heavy = new Heavy(this._config.load)\n    this._transport = new NatsTransport({\n      transport\n    })\n    this._topics = {}\n    this._exposition = {}\n\n    // special variables for the new execution context\n    this.context$ = {}\n    this.meta$ = {}\n    this.delegate$ = {}\n    this.plugin$ = {\n      options: {\n        payloadValidator: ''\n      },\n      attributes: {\n        name: 'core'\n      }\n    }\n    this.trace$ = {}\n    this.request$ = {\n      duration: 0,\n      parentId: '',\n      timestamp: 0,\n      type: 'request',\n      id: ''\n    }\n\n    // contains the list of all registered plugins\n    // the core is also a plugin\n    this._plugins = {\n      core: this.plugin$.attributes\n    }\n\n    this._encoder = {\n      encode: DefaultEncoder.encode\n    }\n    this._decoder = {\n      decode: DefaultDecoder.decode\n    }\n\n    // define extension points\n    this._extensions = {\n      onClientPreRequest: new Extension('onClientPreRequest'),\n      onClientPostRequest: new Extension('onClientPostRequest'),\n      onServerPreHandler: new Extension('onServerPreHandler', true),\n      onServerPreRequest: new Extension('onServerPreRequest', true),\n      onServerPreResponse: new Extension('onServerPreResponse', true)\n    }\n\n    // start tracking process stats\n    this._heavy.start()\n\n    // will be executed before the client request is executed.\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\n    // will be executed after the client received and decoded the request\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\n    // will be executed before the server received the requests\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\n    // will be executed before the server action is executed\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\n    // will be executed before the server reply the response and build the message\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\n\n    // use own logger\n    if (this._config.logger) {\n\n      this.log = this._config.logger\n    } else {\n\n      let pretty = Pino.pretty()\n\n      //Leads to too much listeners in tests\n      if (this._config.logLevel !== 'silent') {\n        pretty.pipe(process.stdout)\n      }\n\n      this.log = Pino({\n        name: this._config.name,\n        safe: true, //avoid error caused by circular references\n        level: this._config.logLevel,\n        serializers: Serializers\n      }, pretty)\n    }\n\n    // no matter how a process exits log and fire event\n    OnExit((code, signal) => {\n      this.log.fatal({\n        code,\n        signal\n      }, 'process exited')\n      this.emit('teardown', {\n        code,\n        signal\n      })\n      this.close()\n    })\n  }\n\n  /**\n   * Return all registered plugins\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get plugins(): {\n    [id: string]: any\n  } {\n\n    return this._plugins\n  }\n\n  /**\n   * Return the bloomrun instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get router(): any {\n\n    return this._router\n  }\n\n  /**\n   * Return the heavy instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get load(): any {\n\n    return this._heavy.load\n  }\n\n  /**\n   * Return the shared object of all exposed data\n   *\n   * @readonly\n   * @type {Exposition}\n   * @memberOf Hemera\n   */\n  get exposition(): any {\n\n    return this._exposition\n  }\n\n  /**\n   * Exposed data in context of the current plugin\n   * Is accessible by this.expositions[<plugin>][<key>]\n   *\n   * @param {string} key\n   * @param {mixed} object\n   *\n   * @memberOf Hemera\n   */\n  expose(key: string, object: mixed) {\n\n    let pluginName = this.plugin$.attributes.name\n\n    if (!this._exposition[pluginName]) {\n\n      this._exposition[pluginName] = {}\n      this._exposition[pluginName][key] = object\n    } else {\n\n      this._exposition[pluginName][key] = object\n    }\n\n  }\n\n  /**\n   * Return the underlying NATS driver\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get transport(): Nats {\n\n    return this._transport.driver\n  }\n\n  /**\n   * Return all registered topics\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get topics(): {\n    [id: string]: any\n  } {\n    return this._topics\n  }\n\n  /**\n   * Add an extension. Extensions are called in serie and can only pass an error\n   * You can work with the current context manipulate something\n   *\n   * @param {any} type\n   * @param {any} handler\n   *\n   * @memberOf Hemera\n   */\n  ext(type: string, handler: Function): void {\n\n    if (!this._extensions[type]) {\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\n        type\n      })\n      this.log.error(error)\n      throw (error)\n    }\n\n    this._extensions[type].add(handler)\n\n  }\n\n  /**\n   * Use a plugin.\n   *\n   * @param {any} plugin\n   *\n   * @memberOf Hemera\n   */\n  use(params: PluginDefinition) {\n\n    if (this._plugins[params.attributes.name]) {\n      let error = new Errors.HemeraError(Constants.PLUGIN_ALREADY_IN_USE, {\n        plugin: params.attributes.name\n      })\n      this.log.error(error)\n      throw (error)\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx.plugin$ = {}\n    ctx.plugin$.attributes = params.attributes || {}\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\n    ctx.plugin$.options = params.options || {}\n    ctx.plugin$.options.payloadValidator = params.options.payloadValidator || ''\n\n    params.plugin.call(ctx, params.options)\n\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\n    this._plugins[params.attributes.name] = ctx.plugin$.attributes\n\n  }\n\n  /**\n   * Change the current plugin configuration\n   * e.g to set the payload validator\n   *\n   * @param {any} options\n   *\n   * @memberOf Hemera\n   */\n  setOption(key: string, value: any) {\n\n    this.plugin$.options[key] = value\n  }\n\n  /**\n   * Change the base configuration.\n   *\n   *\n   * @memberOf Hemera\n   */\n  setConfig(key: string, value: any) {\n\n    this._config[key] = value\n  }\n\n  /**\n   * Exit the process\n   *\n   * @memberOf Hemera\n   */\n  fatal() {\n\n    this.close()\n\n    process.exit(1)\n  }\n\n  /**\n   *\n   *\n   * @param {Function} cb\n   *\n   * @memberOf Hemera\n   */\n  ready(cb: Function) {\n\n    this._transport.driver.on('connect', () => {\n\n      this.log.info(Constants.TRANSPORT_CONNECTED)\n\n      if (_.isFunction(cb)) {\n        cb.call(this)\n      }\n\n    })\n  }\n\n  /**\n   * Build the final payload for the response\n   *\n   *\n   * @memberOf Hemera\n   */\n  _buildMessage() {\n\n    let result: ServerResponse = this._response\n\n    let message: Message = {\n      meta: this.meta$ || {},\n      trace: this.trace$ || {},\n      request: this.request$,\n      result: result.error ? null : result.payload,\n      error: result.error ? Errio.toObject(result.error) : null\n    }\n\n    let endTime: number = Util.nowHrTime()\n    message.request.duration = endTime - message.request.timestamp\n    message.trace.duration = endTime - message.request.timestamp\n\n    let m = this._encoder.encode.call(this, message)\n\n    // attach encoding issues\n    if (m.error) {\n\n      message.error = Errio.toObject(m.error)\n      message.result = null\n    }\n\n    // final response\n    this._message = m.value\n\n  }\n\n  /**\n   * Last step before the response is send to the callee.\n   * The preResponse extension is invoked and previous errors are evaluated.\n   *\n   * @memberOf Hemera\n   */\n  finish() {\n\n    let self: Hemera = this;\n\n    self._extensions.onServerPreResponse.invoke(self, function (err: Error, value: any) {\n\n      // check if an error was already catched\n      if (self._response.error) {\n\n        self.log.error(self._response.error)\n      }\n      // check for an extension error\n      else if (err) {\n\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self._response.error = error\n        self.log.error(self._response.error)\n      }\n\n      // reply value from extension\n      if (value) {\n\n        self._response.payload = value\n      }\n\n      // create message payload\n      self._buildMessage()\n\n      // indicates that an error occurs and that the program should exit\n      if (self._shouldCrash) {\n\n        // only when we have an inbox othwerwise exit the service immediately\n        if (self._replyTo) {\n\n          // send error back to callee\n          return self._transport.send(self._replyTo, self._message, () => {\n\n            // let it crash\n            if (self._config.crashOnFatal) {\n\n              self.fatal()\n            }\n          })\n\n        } else if (self._config.crashOnFatal) {\n\n          return self.fatal()\n        }\n\n      }\n\n      // reply only when we have an inbox\n      if (self._replyTo) {\n\n        return this._transport.send(this._replyTo, self._message)\n      }\n\n    })\n\n  }\n\n  /**\n   * Attach one handler to the topic subscriber.\n   * With subToMany and maxMessages you control NATS specific behaviour.\n   *\n   * @param {string} topic\n   * @param {boolean} subToMany\n   * @param {number} maxMessages\n   *\n   * @memberOf Hemera\n   */\n  subscribe(topic: string, subToMany: boolean, maxMessages: number) {\n\n    let self: Hemera = this\n\n    // avoid duplicate subscribers of the emit stream\n    // we use one subscriber per topic\n    if (self._topics[topic]) {\n      return\n    }\n\n    let handler = (request: any, replyTo: string) => {\n\n      // create new execution context\n      let ctx: Hemera = this.createContext()\n      ctx._shouldCrash = false\n      ctx._replyTo = replyTo\n      ctx._request = new ServerRequest(request)\n      ctx._response = new ServerResponse()\n      ctx._pattern = {}\n      ctx._actMeta = {}\n\n      self._extensions.onServerPreRequest.invoke(ctx, function (err: Error, value: any) {\n\n        let self: Hemera = this\n\n        if (err) {\n\n          let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n          self.log.error(error)\n          self._response.error = error\n\n          return self.finish()\n        }\n\n        // reply value from extension\n        if (value) {\n\n          ctx._response.payload = value\n          return self.finish()\n        }\n\n        // find matched route\n        let requestType = self._request.payload.request.type\n        self._pattern = self._request.payload.pattern\n        self._actMeta = self._router.lookup(self._pattern)\n\n        // check if a handler is registered with this pattern\n        if (self._actMeta) {\n\n          self._extensions.onServerPreHandler.invoke(ctx, function (err: Error, value: any) {\n\n            if (err) {\n\n              self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n\n              self.log.error(self._response.error)\n\n              return self.finish()\n            }\n\n            // reply value from extension\n            if (value) {\n\n              ctx._response.payload = value\n              return self.finish()\n            }\n\n            try {\n\n              let action = self._actMeta.action.bind(self)\n\n              // if request type is 'pubsub' we dont have to reply back\n              if (requestType === 'pubsub') {\n\n                action(self._request.payload.pattern)\n\n                return self.finish()\n              }\n\n              // execute RPC action\n              action(self._request.payload.pattern, (err: Error, resp) => {\n\n                if (err) {\n\n                  self._response.error = new Errors.BusinessError(Constants.IMPLEMENTATION_ERROR, {\n                    pattern: self._pattern\n                  }).causedBy(err)\n\n                  return self.finish()\n                }\n\n                // assign action result\n                self._response.payload = resp\n\n                self.finish()\n              })\n\n            } catch (err) {\n\n              self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\n                pattern: self._pattern\n              }).causedBy(err)\n\n              // service should exit\n              self._shouldCrash = true\n\n              self.finish()\n            }\n\n          })\n\n        } else {\n\n          self.log.info({\n            topic\n          }, Constants.PATTERN_NOT_FOUND)\n\n          self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\n            pattern: self._pattern\n          })\n\n          // send error back to callee\n          self.finish()\n        }\n\n      })\n\n    }\n\n    // standard pubsub with optional max proceed messages\n    if (subToMany) {\n\n      self._transport.subscribe(topic, {\n        max: maxMessages\n      }, handler)\n    } else {\n\n      // queue group names allow load balancing of services\n      self._transport.subscribe(topic, {\n        'queue': 'queue.' + topic,\n        max: maxMessages\n      }, handler)\n    }\n\n    this._topics[topic] = true\n\n  }\n\n  /**\n   * The topic is subscribed on NATS and can be called from any client.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  add(pattern: {\n    [id: string]: any\n  }, cb: Function) {\n\n    let hasCallback = _.isFunction(cb)\n\n    // check for use quick syntax for JSON objects\n    if (_.isString(pattern)) {\n\n      pattern = TinySonic(pattern)\n    }\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    if (!hasCallback) {\n\n      let error = new Errors.HemeraError(Constants.MISSING_IMPLEMENTATION, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    let origPattern = _.cloneDeep(pattern)\n\n    let schema = {}\n\n    // remove objects (rules) from pattern and extract schema\n    _.each(pattern, function (v: string, k: any) {\n\n      if (_.isObject(v)) {\n        schema[k] = _.clone(v)\n        delete origPattern[k]\n      }\n    })\n\n    // remove special $ variables from pattern\n    origPattern = Util.cleanPattern(origPattern)\n\n    // create message object which represent the object behind the matched pattern\n    let actMeta: ActMeta = {\n      schema: schema,\n      pattern: origPattern,\n      action: cb,\n      plugin: this.plugin$\n    }\n\n    let handler = this._router.lookup(origPattern)\n\n    // check if pattern is already registered\n    if (handler) {\n\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    // add to bloomrun\n    this._router.add(origPattern, actMeta)\n\n    this.log.info(origPattern, Constants.ADD_ADDED)\n\n    // subscribe on topic\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\n  }\n\n  /**\n   * Start an action.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  act(pattern: {\n    [id: string]: number\n  }, cb: Function) {\n\n    // check for use quick syntax for JSON objects\n    if (_.isString(pattern)) {\n\n      pattern = TinySonic(pattern)\n    }\n\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx._pattern = pattern\n    ctx._prevContext = this\n    ctx._cleanPattern = Util.cleanPattern(pattern)\n    ctx._response = new ClientResponse()\n    ctx._request = new ClientRequest()\n\n    ctx._extensions.onClientPreRequest.invoke(ctx, function onPreRequest(err: Error) {\n\n      let self: Hemera = this\n\n      let hasCallback = _.isFunction(cb)\n\n      let m = self._encoder.encode.call(self, self._message)\n\n      // throw encoding issue\n      if (m.error) {\n\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\n\n        self.log.error(error)\n\n        if (hasCallback) {\n          return cb.call(self, error)\n        }\n\n        return\n      }\n\n      if (err) {\n\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n\n        self.log.error(error)\n\n        if (hasCallback) {\n          return cb.call(self, error)\n        }\n\n        return\n      }\n\n      ctx._request.payload = m.value\n      ctx._request.error = m.error\n\n      // use simple publish mechanism instead to fire a request\n      if (pattern.pubsub$ === true) {\n\n        if (hasCallback) {\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\n        }\n\n        self._transport.send(pattern.topic, self._request.payload)\n      } else {\n\n        // send request\n        let sid = self._transport.sendRequest(pattern.topic, self._request.payload, (response: any) => {\n\n          let res = self._decoder.decode.call(ctx, response)\n          self._response.payload = res.value\n          self._response.error = res.error\n\n          try {\n\n            // if payload is invalid\n            if (self._response.error) {\n\n              let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\n                pattern: self._cleanPattern\n              }).causedBy(self._response.error)\n\n              self.log.error(error)\n\n              if (hasCallback) {\n                return cb.call(self, error)\n              }\n            }\n\n            self._extensions.onClientPostRequest.invoke(ctx, function (err: Error) {\n\n              if (err) {\n\n                let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n\n                self.log.error(error)\n\n                if (hasCallback) {\n                  return cb.call(self, error)\n                }\n\n                return\n              }\n\n              if (hasCallback) {\n\n                if (self._response.payload.error) {\n\n                  let responseError = Errio.fromObject(self._response.payload.error)\n                  let responseErrorCause = responseError.cause\n                  let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\n                    pattern: self._cleanPattern\n                  }).causedBy(responseErrorCause ? responseError.cause : responseError)\n\n                  self.log.error(error)\n\n                  return cb.call(self, responseError)\n                }\n\n                cb.apply(self, [null, self._response.payload.result])\n              }\n\n            })\n\n          } catch (err) {\n\n            let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n              pattern: self._cleanPattern\n            }).causedBy(err)\n\n            self.log.fatal(error)\n\n            // let it crash\n            if (self._config.crashOnFatal) {\n\n              self.fatal()\n            }\n          }\n        })\n\n        // handle timeout\n        self.handleTimeout(sid, pattern, cb)\n      }\n\n    })\n\n  }\n\n  /**\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\n   * - No one was connected at the time (service unavailable)\n   * - Service is actually still processing the request (service takes too long)\n   * - Service was processing the request but crashed (service error)\n   *\n   * @param {any} sid\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  handleTimeout(sid: number, pattern: {\n    [id: string]: number\n  }, cb: Function) {\n\n    // handle timeout\n    this._transport.timeout(sid, pattern.timeout$ || this._config.timeout, 1, () => {\n\n      let hasCallback = _.isFunction(cb)\n\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\n        pattern\n      })\n\n      this.log.error(error)\n\n      if (hasCallback) {\n\n        try {\n\n          cb.call(this, error)\n        } catch (err) {\n\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n            pattern\n          }).causedBy(err)\n\n          this.log.fatal(error)\n\n          // let it crash\n          if (this._config.crashOnFatal) {\n\n            this.fatal()\n          }\n        }\n      }\n    })\n  }\n\n  /**\n   * Create new instance of hemera but with pointer on the previous propertys\n   * so we are able to create a scope per act without lossing the reference to the core api.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  createContext() {\n\n    var self = this\n\n    var ctx: Hemera = Object.create(self)\n\n    return ctx\n  }\n\n  /**\n   * Return the list of all registered actions\n   *\n   * @memberOf Hemera\n   */\n  list(params: any) {\n\n    return this._router.list(params)\n  }\n\n  /**\n   * Close the process watcher and the underlying transort driver.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  close() {\n\n    this._heavy.stop()\n\n    return this._transport.close()\n  }\n}\n\nmodule.exports = Hemera\n"]}