{"version":3,"sources":["../lib/index.js"],"names":["DefaultExtensions","defaultConfig","timeout","debug","name","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_router","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","plugin$","options","payloadValidator","attributes","trace$","request$","duration","parentId","timestamp","type","id","_shouldCrash","_replyTo","_request","_response","_pattern","_actMeta","_actCallback","_cleanPattern","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","serializers","code","signal","fatal","emit","close","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","warn","PLUGIN_ALREADY_IN_USE","parentPlugin","ctx","createContext","dependencies","plugin","call","info","PLUGIN_ADDED","value","exit","cb","driver","on","TRANSPORT_CONNECTED","isFunction","result","message","meta","trace","request","payload","toObject","endTime","nowHrTime","m","_message","onServerPreResponseHandler","err","self","EXTENSION_ERROR","causedBy","_buildMessage","send","invoke","topic","subToMany","maxMessages","actionHandler","resp","BusinessError","IMPLEMENTATION_ERROR","pattern","finish","action","bind","serial","middleware","item","next","ADD_MIDDLEWARE_ERROR","ImplementationError","onServerPreRequestHandler","lookup","PATTERN_NOT_FOUND","PatternNotFound","replyTo","subscribe","max","isString","NO_TOPIC_TO_SUBSCRIBE","origPattern","cloneDeep","schema","each","v","k","isObject","clone","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","onClientPostRequestHandler","responseError","fromObject","responseErrorCause","cause","BUSINESS_ERROR","sendRequestHandler","response","res","ParseError","PAYLOAD_PARSING_ERROR","FatalError","FATAL_ERROR","onPreRequestHandler","PUB_CALLBACK_REDUNDANT","sid","sendRequest","handleTimeout","_prevContext","timeout$","timeoutHandler","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*!\r\n * hemera\r\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module Dependencies\r\n */\r\n\r\nimport EventEmitter from 'events'\r\nimport Bloomrun from 'bloomrun'\r\nimport Errio from 'errio'\r\nimport Hoek from 'hoek'\r\nimport Heavy from 'heavy'\r\nimport _ from 'lodash'\r\nimport Pino from 'pino'\r\nimport OnExit from 'signal-exit'\r\nimport TinySonic from 'tinysonic'\r\n\r\nimport Errors from './errors'\r\nimport Constants from './constants'\r\nimport Extension from './extension'\r\nimport Util from './util'\r\nimport NatsTransport from './transport'\r\nimport * as DefaultExtensions from './extensions'\r\nimport DefaultEncoder from './encoder'\r\nimport DefaultDecoder from './decoder'\r\nimport ServerResponse from './serverResponse'\r\nimport ServerRequest from './serverRequest'\r\nimport ClientRequest from './clientRequest'\r\nimport ClientResponse from './clientResponse'\r\nimport Serializers from './serializer'\r\nimport Add from './add'\r\n\r\nvar defaultConfig = {\r\n  timeout: 2000,\r\n  debug: false,\r\n  name: 'app',\r\n  crashOnFatal: true,\r\n  logLevel: 'silent',\r\n  load: {\r\n    sampleInterval: 0\r\n  }\r\n}\r\n\r\n/**\r\n * @class Hemera\r\n */\r\nclass Hemera extends EventEmitter {\r\n\r\n  /**\r\n   * Creates an instance of Hemera\r\n   *\r\n   * @param {Nats} transport\r\n   * @param {Config} params\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  constructor (transport, params) {\r\n    super()\r\n\r\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\r\n    this._router = Bloomrun()\r\n    this._heavy = new Heavy(this._config.load)\r\n    this._transport = new NatsTransport({\r\n      transport\r\n    })\r\n    this._topics = {}\r\n    this._exposition = {}\r\n\r\n    // special variables for the new execution context\r\n    this.context$ = {}\r\n    this.meta$ = {}\r\n    this.delegate$ = {}\r\n    this.plugin$ = {\r\n      options: {\r\n        payloadValidator: ''\r\n      },\r\n      attributes: {\r\n        name: 'core'\r\n      }\r\n    }\r\n    this.trace$ = {}\r\n    this.request$ = {\r\n      duration: 0,\r\n      parentId: '',\r\n      timestamp: 0,\r\n      type: 'request',\r\n      id: ''\r\n    }\r\n\r\n    // client and server locales\r\n    this._shouldCrash = false\r\n    this._replyTo = ''\r\n    this._request = null\r\n    this._response = null\r\n    this._pattern = null\r\n    this._actMeta = null\r\n    this._actCallback = null\r\n    this._cleanPattern = ''\r\n\r\n    // contains the list of all registered plugins\r\n    // the core is also a plugin\r\n    this._plugins = {\r\n      core: this.plugin$.attributes\r\n    }\r\n\r\n    this._encoder = {\r\n      encode: DefaultEncoder.encode\r\n    }\r\n    this._decoder = {\r\n      decode: DefaultDecoder.decode\r\n    }\r\n\r\n    // define extension points\r\n    this._extensions = {\r\n      onClientPreRequest: new Extension('onClientPreRequest'),\r\n      onClientPostRequest: new Extension('onClientPostRequest'),\r\n      onServerPreHandler: new Extension('onServerPreHandler', true),\r\n      onServerPreRequest: new Extension('onServerPreRequest', true),\r\n      onServerPreResponse: new Extension('onServerPreResponse', true)\r\n    }\r\n\r\n    // start tracking process stats\r\n    this._heavy.start()\r\n\r\n    // will be executed before the client request is executed.\r\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\r\n    // will be executed after the client received and decoded the request\r\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\r\n    // will be executed before the server received the requests\r\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\r\n    // will be executed before the server action is executed\r\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\r\n    // will be executed before the server reply the response and build the message\r\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\r\n\r\n    // use own logger\r\n    if (this._config.logger) {\r\n      this.log = this._config.logger\r\n    } else {\r\n      let pretty = Pino.pretty()\r\n\r\n      // Leads to too much listeners in tests\r\n      if (this._config.logLevel !== 'silent') {\r\n        pretty.pipe(process.stdout)\r\n      }\r\n\r\n      this.log = Pino({\r\n        name: this._config.name,\r\n        safe: true, // avoid error caused by circular references\r\n        level: this._config.logLevel,\r\n        serializers: Serializers\r\n      }, pretty)\r\n    }\r\n\r\n    // no matter how a process exits log and fire event\r\n    OnExit((code, signal) => {\r\n      this.log.fatal({\r\n        code,\r\n        signal\r\n      }, 'process exited')\r\n      this.emit('teardown', {\r\n        code,\r\n        signal\r\n      })\r\n      this.close()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Return all registered plugins\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get plugins () {\r\n    return this._plugins\r\n  }\r\n\r\n  /**\r\n   * Return the bloomrun instance\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get router () {\r\n    return this._router\r\n  }\r\n\r\n  /**\r\n   * Return the heavy instance\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get load () {\r\n    return this._heavy.load\r\n  }\r\n\r\n  /**\r\n   * Return the shared object of all exposed data\r\n   *\r\n   * @readonly\r\n   * @type {Exposition}\r\n   * @memberOf Hemera\r\n   */\r\n  get exposition () {\r\n    return this._exposition\r\n  }\r\n\r\n  /**\r\n   * Exposed data in context of the current plugin\r\n   * Is accessible by this.expositions[<plugin>][<key>]\r\n   *\r\n   * @param {string} key\r\n   * @param {mixed} object\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  expose (key, object) {\r\n    let pluginName = this.plugin$.attributes.name\r\n\r\n    if (!this._exposition[pluginName]) {\r\n      this._exposition[pluginName] = {}\r\n      this._exposition[pluginName][key] = object\r\n    } else {\r\n      this._exposition[pluginName][key] = object\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the underlying NATS driver\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get transport () {\r\n    return this._transport.driver\r\n  }\r\n\r\n  /**\r\n   * Return all registered topics\r\n   *\r\n   * @readonly\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  get topics () {\r\n    return this._topics\r\n  }\r\n\r\n  /**\r\n   * Add an extension. Extensions are called in serie\r\n   *\r\n   * @param {any} type\r\n   * @param {any} handler\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  ext (type, handler) {\r\n    if (!this._extensions[type]) {\r\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\r\n        type\r\n      })\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    this._extensions[type].add(handler)\r\n  }\r\n\r\n  /**\r\n   * Use a plugin.\r\n   *\r\n   * @param {any} plugin\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  use (params) {\r\n    if (this._plugins[params.attributes.name]) {\r\n      this.log.warn(Constants.PLUGIN_ALREADY_IN_USE, params.attributes.name, this._plugins[params.attributes.name].parentPlugin)\r\n      return\r\n    }\r\n\r\n    // create new execution context\r\n    let ctx = this.createContext()\r\n    ctx.plugin$ = {}\r\n    ctx.plugin$.attributes = params.attributes || {}\r\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\r\n    ctx.plugin$.parentPlugin = this.plugin$.attributes.name\r\n    ctx.plugin$.options = params.options || {}\r\n    ctx.plugin$.options.payloadValidator = params.options.payloadValidator || ''\r\n\r\n    params.plugin.call(ctx, params.options)\r\n\r\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\r\n    this._plugins[params.attributes.name] = ctx.plugin$\r\n  }\r\n\r\n  /**\r\n   * Change the current plugin configuration\r\n   * e.g to set the payload validator\r\n   *\r\n   * @param {any} options\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  setOption (key, value) {\r\n    this.plugin$.options[key] = value\r\n  }\r\n\r\n  /**\r\n   * Change the base configuration.\r\n   *\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  setConfig (key, value) {\r\n    this._config[key] = value\r\n  }\r\n\r\n  /**\r\n   * Exit the process\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  fatal () {\r\n    this.close()\r\n\r\n    process.exit(1)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Function} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  ready (cb) {\r\n    this._transport.driver.on('connect', () => {\r\n      this.log.info(Constants.TRANSPORT_CONNECTED)\r\n\r\n      if (_.isFunction(cb)) {\r\n        cb.call(this)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Build the final payload for the response\r\n   *\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  _buildMessage () {\r\n    let result = this._response\r\n\r\n    let message = {\r\n      meta: this.meta$ || {},\r\n      trace: this.trace$ || {},\r\n      request: this.request$,\r\n      result: result.error ? null : result.payload,\r\n      error: result.error ? Errio.toObject(result.error) : null\r\n    }\r\n\r\n    let endTime = Util.nowHrTime()\r\n    message.request.duration = endTime - message.request.timestamp\r\n    message.trace.duration = endTime - message.request.timestamp\r\n\r\n    let m = this._encoder.encode.call(this, message)\r\n\r\n    // attach encoding issues\r\n    if (m.error) {\r\n      message.error = Errio.toObject(m.error)\r\n      message.result = null\r\n    }\r\n\r\n    // final response\r\n    this._message = m.value\r\n  }\r\n\r\n  /**\r\n   * Last step before the response is send to the callee.\r\n   * The preResponse extension is invoked and previous errors are evaluated.\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  finish () {\r\n    function onServerPreResponseHandler (err, value) {\r\n      const self = this\r\n\r\n      // check if an error was already catched\r\n      if (self._response.error) {\r\n        self.log.error(self._response.error)\r\n      } else if (err) { // check for an extension error\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self._response.error = error\r\n        self.log.error(self._response.error)\r\n      }\r\n\r\n      // reply value from extension\r\n      if (value) {\r\n        self._response.payload = value\r\n      }\r\n\r\n      // create message payload\r\n      self._buildMessage()\r\n\r\n      // indicates that an error occurs and that the program should exit\r\n      if (self._shouldCrash) {\r\n        // only when we have an inbox othwerwise exit the service immediately\r\n        if (self._replyTo) {\r\n          // send error back to callee\r\n          return self._transport.send(self._replyTo, self._message, () => {\r\n            // let it crash\r\n            if (self._config.crashOnFatal) {\r\n              self.fatal()\r\n            }\r\n          })\r\n        } else if (self._config.crashOnFatal) {\r\n          return self.fatal()\r\n        }\r\n      }\r\n\r\n      // reply only when we have an inbox\r\n      if (self._replyTo) {\r\n        return this._transport.send(this._replyTo, self._message)\r\n      }\r\n    }\r\n\r\n    this._extensions.onServerPreResponse.invoke(this, onServerPreResponseHandler)\r\n  }\r\n\r\n  /**\r\n   * Attach one handler to the topic subscriber.\r\n   * With subToMany and maxMessages you control NATS specific behaviour.\r\n   *\r\n   * @param {string} topic\r\n   * @param {boolean} subToMany\r\n   * @param {number} maxMessages\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  subscribe (topic, subToMany, maxMessages) {\r\n    const self = this\r\n\r\n    // avoid duplicate subscribers of the emit stream\r\n    // we use one subscriber per topic\r\n    if (self._topics[topic]) {\r\n      return\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @param {any} resp\r\n     * @returns\r\n     */\r\n    function actionHandler (err, resp) {\r\n      const self = this\r\n\r\n      if (err) {\r\n        self._response.error = new Errors.BusinessError(Constants.IMPLEMENTATION_ERROR, {\r\n          pattern: self._pattern\r\n        }).causedBy(err)\r\n\r\n        return self.finish()\r\n      }\r\n\r\n      // assign action result\r\n      self._response.payload = resp\r\n      // delete error we have payload\r\n      self._response.error = null\r\n\r\n      self.finish()\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @param {any} value\r\n     * @returns\r\n     */\r\n    function onServerPreHandler (err, value) {\r\n      const self = this\r\n\r\n      if (err) {\r\n        self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.log.error(self._response.error)\r\n\r\n        return self.finish()\r\n      }\r\n\r\n      // reply value from extension\r\n      if (value) {\r\n        self._response.payload = value\r\n        return self.finish()\r\n      }\r\n\r\n      try {\r\n        let action = self._actMeta.action.bind(self)\r\n\r\n        // execute add middlewares\r\n        Util.serial(self._actMeta.middleware, (item, next) => {\r\n          item(self._request, self._response, next)\r\n        }, (err) => {\r\n          // middleware error\r\n          if (err) {\r\n            let error = new Errors.HemeraError(Constants.ADD_MIDDLEWARE_ERROR).causedBy(err)\r\n            self.log.error(error)\r\n            self._response.error = error\r\n            return self.finish()\r\n          }\r\n\r\n          // if request type is 'pubsub' we dont have to reply back\r\n          if (self._request.payload.request.type === 'pubsub') {\r\n            action(self._request.payload.pattern)\r\n            return self.finish()\r\n          }\r\n\r\n          // execute RPC action\r\n          action(self._request.payload.pattern, actionHandler.bind(self))\r\n        })\r\n      } catch (err) {\r\n        self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\r\n          pattern: self._pattern\r\n        }).causedBy(err)\r\n\r\n        // service should exit\r\n        self._shouldCrash = true\r\n\r\n        self.finish()\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @param {any} value\r\n     * @returns\r\n     */\r\n    function onServerPreRequestHandler (err, value) {\r\n      let self = this\r\n\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.log.error(error)\r\n        self._response.error = error\r\n\r\n        return self.finish()\r\n      }\r\n\r\n      // reply value from extension\r\n      if (value) {\r\n        self._response.payload = value\r\n        return self.finish()\r\n      }\r\n\r\n      // find matched route\r\n      self._pattern = self._request.payload.pattern\r\n      self._actMeta = self._router.lookup(self._pattern)\r\n\r\n      // check if a handler is registered with this pattern\r\n      if (self._actMeta) {\r\n        self._extensions.onServerPreHandler.invoke(self, onServerPreHandler)\r\n      } else {\r\n        self.log.info({\r\n          topic\r\n        }, Constants.PATTERN_NOT_FOUND)\r\n\r\n        self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\r\n          pattern: self._pattern\r\n        })\r\n\r\n        // send error back to callee\r\n        self.finish()\r\n      }\r\n    }\r\n\r\n    let handler = (request, replyTo) => {\r\n      // create new execution context\r\n      let ctx = this.createContext()\r\n      ctx._shouldCrash = false\r\n      ctx._replyTo = replyTo\r\n      ctx._request = new ServerRequest(request)\r\n      ctx._response = new ServerResponse()\r\n      ctx._pattern = {}\r\n      ctx._actMeta = {}\r\n\r\n      ctx._extensions.onServerPreRequest.invoke(ctx, onServerPreRequestHandler)\r\n    }\r\n\r\n    // standard pubsub with optional max proceed messages\r\n    if (subToMany) {\r\n      self._transport.subscribe(topic, {\r\n        max: maxMessages\r\n      }, handler)\r\n    } else {\r\n      // queue group names allow load balancing of services\r\n      self._transport.subscribe(topic, {\r\n        'queue': 'queue.' + topic,\r\n        max: maxMessages\r\n      }, handler)\r\n    }\r\n\r\n    self._topics[topic] = true\r\n  }\r\n\r\n  /**\r\n   * The topic is subscribed on NATS and can be called from any client.\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  add (pattern, cb) {\r\n    // check for use quick syntax for JSON objects\r\n    if (_.isString(pattern)) {\r\n      pattern = TinySonic(pattern)\r\n    }\r\n\r\n    // topic is needed to subscribe on a subject in NATS\r\n    if (!pattern.topic) {\r\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    let origPattern = _.cloneDeep(pattern)\r\n\r\n    let schema = {}\r\n\r\n    // remove objects (rules) from pattern and extract schema\r\n    _.each(pattern, function (v, k) {\r\n      if (_.isObject(v)) {\r\n        schema[k] = _.clone(v)\r\n        delete origPattern[k]\r\n      }\r\n    })\r\n\r\n    // remove special $ variables from pattern\r\n    origPattern = Util.cleanPattern(origPattern)\r\n\r\n    // create message object which represent the object behind the matched pattern\r\n    let actMeta = new Add({\r\n      schema: schema,\r\n      pattern: origPattern,\r\n      action: cb,\r\n      plugin: this.plugin$\r\n    })\r\n\r\n    let handler = this._router.lookup(origPattern)\r\n\r\n    // check if pattern is already registered\r\n    if (handler) {\r\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    // add to bloomrun\r\n    this._router.add(origPattern, actMeta)\r\n\r\n    this.log.info(origPattern, Constants.ADD_ADDED)\r\n\r\n    // subscribe on topic\r\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\r\n\r\n    return actMeta\r\n  }\r\n\r\n  /**\r\n   * Start an action.\r\n   *\r\n   * @param {any} pattern\r\n   * @param {any} cb\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  act (pattern, cb) {\r\n    // check for use quick syntax for JSON objects\r\n    if (_.isString(pattern)) {\r\n      pattern = TinySonic(pattern)\r\n    }\r\n\r\n    // topic is needed to subscribe on a subject in NATS\r\n    if (!pattern.topic) {\r\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n      throw (error)\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @returns\r\n     */\r\n    function onClientPostRequestHandler (err) {\r\n      const self = this\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n\r\n        self.log.error(error)\r\n\r\n        if (self._actCallback) {\r\n          return self._actCallback(error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      if (self._actCallback) {\r\n        if (self._response.payload.error) {\r\n          let responseError = Errio.fromObject(self._response.payload.error)\r\n          let responseErrorCause = responseError.cause\r\n          let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\r\n            pattern: self._cleanPattern\r\n          }).causedBy(responseErrorCause ? responseError.cause : responseError)\r\n\r\n          self.log.error(error)\r\n\r\n          return self._actCallback(responseError)\r\n        }\r\n\r\n        self._actCallback(null, self._response.payload.result)\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} response\r\n     * @returns\r\n     */\r\n    function sendRequestHandler (response) {\r\n      const self = this\r\n      const res = self._decoder.decode.call(self, response)\r\n      self._response.payload = res.value\r\n      self._response.error = res.error\r\n\r\n      try {\r\n        // if payload is invalid\r\n        if (self._response.error) {\r\n          let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\r\n            pattern: self._cleanPattern\r\n          }).causedBy(self._response.error)\r\n\r\n          self.log.error(error)\r\n\r\n          if (self._actCallback) {\r\n            return self._actCallback(error)\r\n          }\r\n        }\r\n\r\n        self._extensions.onClientPostRequest.invoke(self, onClientPostRequestHandler)\r\n      } catch (err) {\r\n        let error = new Errors.FatalError(Constants.FATAL_ERROR, {\r\n          pattern: self._cleanPattern\r\n        }).causedBy(err)\r\n\r\n        self.log.fatal(error)\r\n\r\n        // let it crash\r\n        if (self._config.crashOnFatal) {\r\n          self.fatal()\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {any} err\r\n     * @returns\r\n     */\r\n    function onPreRequestHandler (err) {\r\n      const self = this\r\n\r\n      let m = self._encoder.encode.call(self, self._message)\r\n\r\n      // throw encoding issue\r\n      if (m.error) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\r\n\r\n        self.log.error(error)\r\n\r\n        if (self._actCallback) {\r\n          return self._actCallback(error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      if (err) {\r\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n\r\n        self.log.error(error)\r\n\r\n        if (self._actCallback) {\r\n          return self._actCallback(error)\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      self._request.payload = m.value\r\n      self._request.error = m.error\r\n\r\n      // use simple publish mechanism instead of request/reply\r\n      if (pattern.pubsub$ === true) {\r\n        if (self._actCallback) {\r\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\r\n        }\r\n\r\n        self._transport.send(pattern.topic, self._request.payload)\r\n      } else {\r\n        // send request\r\n        let sid = self._transport.sendRequest(pattern.topic, self._request.payload, sendRequestHandler.bind(self))\r\n\r\n        // handle timeout\r\n        self.handleTimeout(sid, pattern)\r\n      }\r\n    }\r\n\r\n    // create new execution context\r\n    let ctx = this.createContext()\r\n    ctx._pattern = pattern\r\n    ctx._prevContext = this\r\n    ctx._actCallback = _.isFunction(cb) ? cb.bind(ctx) : null\r\n    ctx._cleanPattern = Util.cleanPattern(pattern)\r\n    ctx._response = new ClientResponse()\r\n    ctx._request = new ClientRequest()\r\n\r\n    ctx._extensions.onClientPreRequest.invoke(ctx, onPreRequestHandler)\r\n  }\r\n\r\n  /**\r\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\r\n   * - No one was connected at the time (service unavailable)\r\n   * - Service is actually still processing the request (service takes too long)\r\n   * - Service was processing the request but crashed (service error)\r\n   *\r\n   * @param {any} sid\r\n   * @param {any} pattern\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  handleTimeout (sid, pattern) {\r\n    const timeout = pattern.timeout$ || this._config.timeout\r\n\r\n    function onClientPostRequestHandler (err) {\r\n      const self = this\r\n      if (err) {\r\n        self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\r\n        self.log.error(self._response.error)\r\n      }\r\n\r\n      if (self._actCallback) {\r\n        try {\r\n          self._actCallback(self._response.error)\r\n        } catch (err) {\r\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\r\n            pattern\r\n          }).causedBy(err)\r\n\r\n          self.log.fatal(error)\r\n\r\n          // let it crash\r\n          if (self._config.crashOnFatal) {\r\n            self.fatal()\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let timeoutHandler = () => {\r\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\r\n        pattern\r\n      })\r\n\r\n      this.log.error(error)\r\n\r\n      this._response.error = error\r\n\r\n      this._extensions.onClientPostRequest.invoke(this, onClientPostRequestHandler)\r\n    }\r\n\r\n    this._transport.timeout(sid, timeout, 1, timeoutHandler)\r\n  }\r\n\r\n  /**\r\n   * Create new instance of hemera but with pointer on the previous propertys\r\n   * so we are able to create a scope per act without lossing the reference to the core api.\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  createContext () {\r\n    var self = this\r\n\r\n    var ctx = Object.create(self)\r\n\r\n    return ctx\r\n  }\r\n\r\n  /**\r\n   * Return the list of all registered actions\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  list (params) {\r\n    return this._router.list(params)\r\n  }\r\n\r\n  /**\r\n   * Close the process watcher and the underlying transort driver.\r\n   *\r\n   * @returns\r\n   *\r\n   * @memberOf Hemera\r\n   */\r\n  close () {\r\n    this._heavy.stop()\r\n\r\n    return this._transport.close()\r\n  }\r\n}\r\n\r\nmodule.exports = Hemera\r\n"]}