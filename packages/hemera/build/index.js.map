{"version":3,"sources":["../lib/index.js"],"names":["DefaultExtensions","defaultConfig","timeout","debug","name","crashOnFatal","logLevel","load","sampleInterval","Hemera","transport","params","_config","applyToDefaults","_router","_heavy","_transport","_topics","_exposition","context$","meta$","delegate$","auth$","plugin$","options","payloadValidator","attributes","trace$","request$","duration","parentId","timestamp","type","id","_shouldCrash","_topic","_replyTo","_request","_response","_pattern","_actMeta","_actCallback","_cleanPattern","_plugins","core","_encoder","encode","_decoder","decode","_extensions","onClientPreRequest","onClientPostRequest","onServerPreHandler","onServerPreRequest","onServerPreResponse","start","addRange","logger","log","pretty","pipe","process","stdout","safe","level","serializers","code","signal","fatal","emit","close","key","object","pluginName","handler","error","HemeraError","INVALID_EXTENSION_TYPE","add","warn","PLUGIN_ALREADY_IN_USE","parentPlugin","ctx","createContext","dependencies","plugin","call","info","PLUGIN_ADDED","value","exit","cb","driver","on","TRANSPORT_CONNECTED","isFunction","result","message","meta","trace","request","payload","toObject","endTime","nowHrTime","m","_message","onServerPreResponseHandler","err","self","EXTENSION_ERROR","causedBy","_buildMessage","send","invoke","topic","subToMany","maxMessages","actionHandler","resp","BusinessError","IMPLEMENTATION_ERROR","pattern","finish","action","bind","serial","middleware","item","next","ADD_MIDDLEWARE_ERROR","ImplementationError","onServerPreRequestHandler","lookup","PATTERN_NOT_FOUND","PatternNotFound","replyTo","subscribe","max","isString","NO_TOPIC_TO_SUBSCRIBE","origPattern","cloneDeep","schema","extractSchema","cleanPattern","actMeta","PATTERN_ALREADY_IN_USE","ADD_ADDED","pubsub$","maxMessages$","NO_TOPIC_TO_REQUEST","onClientPostRequestHandler","responseError","fromObject","responseErrorCause","cause","BUSINESS_ERROR","sendRequestHandler","response","res","ParseError","PAYLOAD_PARSING_ERROR","FatalError","FATAL_ERROR","onPreRequestHandler","PUB_CALLBACK_REDUNDANT","sid","sendRequest","handleTimeout","_prevContext","timeout$","timeoutHandler","TimeoutError","ACT_TIMEOUT_ERROR","Object","create","list","stop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\n/**\n * Module Dependencies\n */\n\nimport EventEmitter from 'events'\nimport Bloomrun from 'bloomrun'\nimport Errio from 'errio'\nimport Hoek from 'hoek'\nimport Heavy from 'heavy'\nimport _ from 'lodash'\nimport Pino from 'pino'\nimport OnExit from 'signal-exit'\nimport TinySonic from 'tinysonic'\n\nimport Errors from './errors'\nimport Constants from './constants'\nimport Extension from './extension'\nimport Util from './util'\nimport NatsTransport from './transport'\nimport * as DefaultExtensions from './extensions'\nimport DefaultEncoder from './encoder'\nimport DefaultDecoder from './decoder'\nimport ServerResponse from './serverResponse'\nimport ServerRequest from './serverRequest'\nimport ClientRequest from './clientRequest'\nimport ClientResponse from './clientResponse'\nimport Serializers from './serializer'\nimport Add from './add'\n\nvar defaultConfig = {\n  timeout: 2000,\n  debug: false,\n  name: 'app',\n  crashOnFatal: true,\n  logLevel: 'silent',\n  load: {\n    sampleInterval: 0\n  }\n}\n\n/**\n * @class Hemera\n */\nclass Hemera extends EventEmitter {\n\n  /**\n   * Creates an instance of Hemera\n   *\n   * @param {Nats} transport\n   * @param {Config} params\n   *\n   * @memberOf Hemera\n   */\n  constructor (transport, params) {\n    super()\n\n    this._config = Hoek.applyToDefaults(defaultConfig, params || {})\n    this._router = Bloomrun()\n    this._heavy = new Heavy(this._config.load)\n    this._transport = new NatsTransport({\n      transport\n    })\n    this._topics = {}\n    this._exposition = {}\n\n    // special variables for the new execution context\n    this.context$ = {}\n    this.meta$ = {}\n    this.delegate$ = {}\n    this.auth$ = {}\n    this.plugin$ = {\n      options: {\n        payloadValidator: ''\n      },\n      attributes: {\n        name: 'core'\n      }\n    }\n    this.trace$ = {}\n    this.request$ = {\n      duration: 0,\n      parentId: '',\n      timestamp: 0,\n      type: 'request',\n      id: ''\n    }\n\n    // client and server locales\n    this._shouldCrash = false\n    this._topic = ''\n    this._replyTo = ''\n    this._request = null\n    this._response = null\n    this._pattern = null\n    this._actMeta = null\n    this._actCallback = null\n    this._cleanPattern = ''\n\n    // contains the list of all registered plugins\n    // the core is also a plugin\n    this._plugins = {\n      core: this.plugin$.attributes\n    }\n\n    this._encoder = {\n      encode: DefaultEncoder.encode\n    }\n    this._decoder = {\n      decode: DefaultDecoder.decode\n    }\n\n    // define extension points\n    this._extensions = {\n      onClientPreRequest: new Extension('onClientPreRequest'),\n      onClientPostRequest: new Extension('onClientPostRequest'),\n      onServerPreHandler: new Extension('onServerPreHandler', true),\n      onServerPreRequest: new Extension('onServerPreRequest', true),\n      onServerPreResponse: new Extension('onServerPreResponse', true)\n    }\n\n    // start tracking process stats\n    this._heavy.start()\n\n    // will be executed before the client request is executed.\n    this._extensions.onClientPreRequest.addRange(DefaultExtensions.onClientPreRequest)\n    // will be executed after the client received and decoded the request\n    this._extensions.onClientPostRequest.addRange(DefaultExtensions.onClientPostRequest)\n    // will be executed before the server received the requests\n    this._extensions.onServerPreRequest.addRange(DefaultExtensions.onServerPreRequest)\n    // will be executed before the server action is executed\n    this._extensions.onServerPreHandler.addRange(DefaultExtensions.onServerPreHandler)\n    // will be executed before the server reply the response and build the message\n    this._extensions.onServerPreResponse.addRange(DefaultExtensions.onServerPreResponse)\n\n    // use own logger\n    if (this._config.logger) {\n      this.log = this._config.logger\n    } else {\n      let pretty = Pino.pretty()\n\n      // Leads to too much listeners in tests\n      if (this._config.logLevel !== 'silent') {\n        pretty.pipe(process.stdout)\n      }\n\n      this.log = Pino({\n        name: this._config.name,\n        safe: true, // avoid error caused by circular references\n        level: this._config.logLevel,\n        serializers: Serializers\n      }, pretty)\n    }\n\n    // no matter how a process exits log and fire event\n    OnExit((code, signal) => {\n      this.log.fatal({\n        code,\n        signal\n      }, 'process exited')\n      this.emit('teardown', {\n        code,\n        signal\n      })\n      this.close()\n    })\n  }\n\n  /**\n   * Return all registered plugins\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get plugins () {\n    return this._plugins\n  }\n\n  /**\n   * Return the bloomrun instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get router () {\n    return this._router\n  }\n\n  /**\n   * Return the heavy instance\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get load () {\n    return this._heavy.load\n  }\n\n  /**\n   * Return the shared object of all exposed data\n   *\n   * @readonly\n   * @type {Exposition}\n   * @memberOf Hemera\n   */\n  get exposition () {\n    return this._exposition\n  }\n\n  /**\n   * Exposed data in context of the current plugin\n   * Is accessible by this.expositions[<plugin>][<key>]\n   *\n   * @param {string} key\n   * @param {mixed} object\n   *\n   * @memberOf Hemera\n   */\n  expose (key, object) {\n    let pluginName = this.plugin$.attributes.name\n\n    if (!this._exposition[pluginName]) {\n      this._exposition[pluginName] = {}\n      this._exposition[pluginName][key] = object\n    } else {\n      this._exposition[pluginName][key] = object\n    }\n  }\n\n  /**\n   * Return the underlying NATS driver\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get transport () {\n    return this._transport.driver\n  }\n\n  /**\n   * Return all registered topics\n   *\n   * @readonly\n   *\n   * @memberOf Hemera\n   */\n  get topics () {\n    return this._topics\n  }\n\n  /**\n   * Add an extension. Extensions are called in serie\n   *\n   * @param {any} type\n   * @param {any} handler\n   *\n   * @memberOf Hemera\n   */\n  ext (type, handler) {\n    if (!this._extensions[type]) {\n      let error = new Errors.HemeraError(Constants.INVALID_EXTENSION_TYPE, {\n        type\n      })\n      this.log.error(error)\n      throw (error)\n    }\n\n    this._extensions[type].add(handler)\n  }\n\n  /**\n   * Use a plugin.\n   *\n   * @param {any} plugin\n   *\n   * @memberOf Hemera\n   */\n  use (params) {\n    if (this._plugins[params.attributes.name]) {\n      this.log.warn(Constants.PLUGIN_ALREADY_IN_USE, params.attributes.name, this._plugins[params.attributes.name].parentPlugin)\n      return\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx.plugin$ = {}\n    ctx.plugin$.attributes = params.attributes || {}\n    ctx.plugin$.attributes.dependencies = params.attributes.dependencies || []\n    ctx.plugin$.parentPlugin = this.plugin$.attributes.name\n    ctx.plugin$.options = params.options || {}\n    ctx.plugin$.options.payloadValidator = params.options.payloadValidator || ''\n\n    params.plugin.call(ctx, params.options)\n\n    this.log.info(params.attributes.name, Constants.PLUGIN_ADDED)\n    this._plugins[params.attributes.name] = ctx.plugin$\n  }\n\n  /**\n   * Change the current plugin configuration\n   * e.g to set the payload validator\n   *\n   * @param {any} options\n   *\n   * @memberOf Hemera\n   */\n  setOption (key, value) {\n    this.plugin$.options[key] = value\n  }\n\n  /**\n   * Change the base configuration.\n   *\n   *\n   * @memberOf Hemera\n   */\n  setConfig (key, value) {\n    this._config[key] = value\n  }\n\n  /**\n   * Exit the process\n   *\n   * @memberOf Hemera\n   */\n  fatal () {\n    this.close()\n\n    process.exit(1)\n  }\n\n  /**\n   *\n   *\n   * @param {Function} cb\n   *\n   * @memberOf Hemera\n   */\n  ready (cb) {\n    this._transport.driver.on('connect', () => {\n      this.log.info(Constants.TRANSPORT_CONNECTED)\n\n      if (_.isFunction(cb)) {\n        cb.call(this)\n      }\n    })\n  }\n\n  /**\n   * Build the final payload for the response\n   *\n   *\n   * @memberOf Hemera\n   */\n  _buildMessage () {\n    let result = this._response\n\n    let message = {\n      meta: this.meta$ || {},\n      trace: this.trace$ || {},\n      request: this.request$,\n      result: result.error ? null : result.payload,\n      error: result.error ? Errio.toObject(result.error) : null\n    }\n\n    let endTime = Util.nowHrTime()\n    message.request.duration = endTime - message.request.timestamp\n    message.trace.duration = endTime - message.request.timestamp\n\n    let m = this._encoder.encode.call(this, message)\n\n    // attach encoding issues\n    if (m.error) {\n      message.error = Errio.toObject(m.error)\n      message.result = null\n    }\n\n    // final response\n    this._message = m.value\n  }\n\n  /**\n   * Last step before the response is send to the callee.\n   * The preResponse extension is invoked and previous errors are evaluated.\n   *\n   * @memberOf Hemera\n   */\n  finish () {\n    function onServerPreResponseHandler (err, value) {\n      const self = this\n\n      // check if an error was already catched\n      if (self._response.error) {\n        self.emit('serverResponseError', self._response.error)\n        self.log.error(self._response.error)\n      } else if (err) { // check for an extension error\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('serverResponseError', error)\n        self._response.error = error\n        self.log.error(self._response.error)\n      }\n\n      // reply value from extension\n      if (value) {\n        self._response.payload = value\n      }\n\n      // create message payload\n      self._buildMessage()\n\n      // indicates that an error occurs and that the program should exit\n      if (self._shouldCrash) {\n        // only when we have an inbox othwerwise exit the service immediately\n        if (self._replyTo) {\n          // send error back to callee\n          return self._transport.send(self._replyTo, self._message, () => {\n            // let it crash\n            if (self._config.crashOnFatal) {\n              self.fatal()\n            }\n          })\n        } else if (self._config.crashOnFatal) {\n          return self.fatal()\n        }\n      }\n\n      // reply only when we have an inbox\n      if (self._replyTo) {\n        return this._transport.send(this._replyTo, self._message)\n      }\n    }\n\n    this._extensions.onServerPreResponse.invoke(this, onServerPreResponseHandler)\n  }\n\n  /**\n   * Attach one handler to the topic subscriber.\n   * With subToMany and maxMessages you control NATS specific behaviour.\n   *\n   * @param {string} topic\n   * @param {boolean} subToMany\n   * @param {number} maxMessages\n   *\n   * @memberOf Hemera\n   */\n  subscribe (topic, subToMany, maxMessages) {\n    const self = this\n\n    // avoid duplicate subscribers of the emit stream\n    // we use one subscriber per topic\n    if (self._topics[topic]) {\n      return\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @param {any} resp\n     * @returns\n     */\n    function actionHandler (err, resp) {\n      const self = this\n\n      if (err) {\n        self._response.error = new Errors.BusinessError(Constants.IMPLEMENTATION_ERROR, {\n          pattern: self._pattern\n        }).causedBy(err)\n\n        return self.finish()\n      }\n\n      // assign action result\n      self._response.payload = resp\n      // delete error we have payload\n      self._response.error = null\n\n      self.finish()\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @param {any} value\n     * @returns\n     */\n    function onServerPreHandler (err, value) {\n      const self = this\n\n      if (err) {\n        self._response.error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.log.error(self._response.error)\n\n        return self.finish()\n      }\n\n      // reply value from extension\n      if (value) {\n        self._response.payload = value\n        return self.finish()\n      }\n\n      try {\n        let action = self._actMeta.action.bind(self)\n\n        // execute add middlewares\n        Util.serial(self._actMeta.middleware, (item, next) => {\n          item(self._request, self._response, next)\n        }, (err) => {\n          // middleware error\n          if (err) {\n            let error = new Errors.HemeraError(Constants.ADD_MIDDLEWARE_ERROR).causedBy(err)\n            self.log.error(error)\n            self._response.error = error\n            return self.finish()\n          }\n\n          // if request type is 'pubsub' we dont have to reply back\n          if (self._request.payload.request.type === 'pubsub') {\n            action(self._request.payload.pattern)\n            return self.finish()\n          }\n\n          // execute RPC action\n          action(self._request.payload.pattern, actionHandler.bind(self))\n        })\n      } catch (err) {\n        self._response.error = new Errors.ImplementationError(Constants.IMPLEMENTATION_ERROR, {\n          pattern: self._pattern\n        }).causedBy(err)\n\n        // service should exit\n        self._shouldCrash = true\n\n        self.finish()\n      }\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @param {any} value\n     * @returns\n     */\n    function onServerPreRequestHandler (err, value) {\n      let self = this\n\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.log.error(error)\n        self._response.error = error\n\n        return self.finish()\n      }\n\n      // reply value from extension\n      if (value) {\n        self._response.payload = value\n        return self.finish()\n      }\n\n      // find matched route\n      self._pattern = self._request.payload.pattern\n      self._actMeta = self._router.lookup(self._pattern)\n\n      // check if a handler is registered with this pattern\n      if (self._actMeta) {\n        self._extensions.onServerPreHandler.invoke(self, onServerPreHandler)\n      } else {\n        self.log.info({\n          topic: self._topic\n        }, Constants.PATTERN_NOT_FOUND)\n\n        self._response.error = new Errors.PatternNotFound(Constants.PATTERN_NOT_FOUND, {\n          pattern: self._pattern\n        })\n\n        // send error back to callee\n        self.finish()\n      }\n    }\n\n    let handler = (request, replyTo) => {\n      // create new execution context\n      let ctx = this.createContext()\n      ctx._shouldCrash = false\n      ctx._replyTo = replyTo\n      ctx._topic = topic\n      ctx._request = new ServerRequest(request)\n      ctx._response = new ServerResponse()\n      ctx._pattern = {}\n      ctx._actMeta = {}\n\n      ctx._extensions.onServerPreRequest.invoke(ctx, onServerPreRequestHandler)\n    }\n\n    // standard pubsub with optional max proceed messages\n    if (subToMany) {\n      self._transport.subscribe(topic, {\n        max: maxMessages\n      }, handler)\n    } else {\n      // queue group names allow load balancing of services\n      self._transport.subscribe(topic, {\n        'queue': 'queue.' + topic,\n        max: maxMessages\n      }, handler)\n    }\n\n    self._topics[topic] = true\n  }\n\n  /**\n   * The topic is subscribed on NATS and can be called from any client.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  add (pattern, cb) {\n    // check for use quick syntax for JSON objects\n    if (_.isString(pattern)) {\n      pattern = TinySonic(pattern)\n    }\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_SUBSCRIBE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    let origPattern = _.cloneDeep(pattern)\n    let schema = Util.extractSchema(origPattern)\n    origPattern = Util.cleanPattern(origPattern)\n\n    // create message object which represent the object behind the matched pattern\n    let actMeta = new Add({\n      schema: schema,\n      pattern: origPattern,\n      action: cb,\n      plugin: this.plugin$\n    })\n\n    let handler = this._router.lookup(origPattern)\n\n    // check if pattern is already registered\n    if (handler) {\n      let error = new Errors.HemeraError(Constants.PATTERN_ALREADY_IN_USE, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    // add to bloomrun\n    this._router.add(origPattern, actMeta)\n\n    this.log.info(origPattern, Constants.ADD_ADDED)\n\n    // subscribe on topic\n    this.subscribe(pattern.topic, pattern.pubsub$, pattern.maxMessages$)\n\n    return actMeta\n  }\n\n  /**\n   * Start an action.\n   *\n   * @param {any} pattern\n   * @param {any} cb\n   *\n   * @memberOf Hemera\n   */\n  act (pattern, cb) {\n    // check for use quick syntax for JSON objects\n    if (_.isString(pattern)) {\n      pattern = TinySonic(pattern)\n    }\n\n    // topic is needed to subscribe on a subject in NATS\n    if (!pattern.topic) {\n      let error = new Errors.HemeraError(Constants.NO_TOPIC_TO_REQUEST, {\n        pattern\n      })\n\n      this.log.error(error)\n      throw (error)\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @returns\n     */\n    function onClientPostRequestHandler (err) {\n      const self = this\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('clientResponseError', error)\n        self.log.error(error)\n\n        if (self._actCallback) {\n          return self._actCallback(error)\n        }\n\n        return\n      }\n\n      if (self._actCallback) {\n        if (self._response.payload.error) {\n          let responseError = Errio.fromObject(self._response.payload.error)\n          let responseErrorCause = responseError.cause\n          let error = new Errors.BusinessError(Constants.BUSINESS_ERROR, {\n            pattern: self._cleanPattern\n          }).causedBy(responseErrorCause ? responseError.cause : responseError)\n          self.emit('clientResponseError', error)\n          self.log.error(error)\n\n          return self._actCallback(responseError)\n        }\n\n        self._actCallback(null, self._response.payload.result)\n      }\n    }\n\n    /**\n     *\n     *\n     * @param {any} response\n     * @returns\n     */\n    function sendRequestHandler (response) {\n      const self = this\n      const res = self._decoder.decode.call(self, response)\n      self._response.payload = res.value\n      self._response.error = res.error\n\n      try {\n        // if payload is invalid\n        if (self._response.error) {\n          let error = new Errors.ParseError(Constants.PAYLOAD_PARSING_ERROR, {\n            pattern: self._cleanPattern\n          }).causedBy(self._response.error)\n          self.emit('clientResponseError', error)\n          self.log.error(error)\n\n          if (self._actCallback) {\n            return self._actCallback(error)\n          }\n        }\n\n        self._extensions.onClientPostRequest.invoke(self, onClientPostRequestHandler)\n      } catch (err) {\n        let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n          pattern: self._cleanPattern\n        }).causedBy(err)\n        self.emit('clientResponseError', error)\n        self.log.fatal(error)\n\n        // let it crash\n        if (self._config.crashOnFatal) {\n          self.fatal()\n        }\n      }\n    }\n\n    /**\n     *\n     *\n     * @param {any} err\n     * @returns\n     */\n    function onPreRequestHandler (err) {\n      const self = this\n\n      let m = self._encoder.encode.call(self, self._message)\n\n      // throw encoding issue\n      if (m.error) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(m.error)\n        self.emit('clientResponseError', error)\n        self.log.error(error)\n\n        if (self._actCallback) {\n          return self._actCallback(error)\n        }\n\n        return\n      }\n\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('clientResponseError', error)\n        self.log.error(error)\n\n        if (self._actCallback) {\n          return self._actCallback(error)\n        }\n\n        return\n      }\n\n      self._request.payload = m.value\n      self._request.error = m.error\n\n      // use simple publish mechanism instead of request/reply\n      if (pattern.pubsub$ === true) {\n        if (self._actCallback) {\n          self.log.info(Constants.PUB_CALLBACK_REDUNDANT)\n        }\n\n        self._transport.send(pattern.topic, self._request.payload)\n      } else {\n        // send request\n        let sid = self._transport.sendRequest(pattern.topic, self._request.payload, sendRequestHandler.bind(self))\n\n        // handle timeout\n        self.handleTimeout(sid, pattern)\n      }\n    }\n\n    // create new execution context\n    let ctx = this.createContext()\n    ctx._pattern = pattern\n    ctx._prevContext = this\n    ctx._actCallback = _.isFunction(cb) ? cb.bind(ctx) : null\n    ctx._cleanPattern = Util.cleanPattern(pattern)\n    ctx._response = new ClientResponse()\n    ctx._request = new ClientRequest()\n\n    ctx._extensions.onClientPreRequest.invoke(ctx, onPreRequestHandler)\n  }\n\n  /**\n   * Handle the timeout when a pattern could not be resolved. Can have different reasons:\n   * - No one was connected at the time (service unavailable)\n   * - Service is actually still processing the request (service takes too long)\n   * - Service was processing the request but crashed (service error)\n   *\n   * @param {any} sid\n   * @param {any} pattern\n   *\n   * @memberOf Hemera\n   */\n  handleTimeout (sid, pattern) {\n    const timeout = pattern.timeout$ || this._config.timeout\n\n    function onClientPostRequestHandler (err) {\n      const self = this\n      if (err) {\n        let error = new Errors.HemeraError(Constants.EXTENSION_ERROR).causedBy(err)\n        self.emit('clientResponseError', error)\n        self._response.error = error\n        self.log.error(self._response.error)\n      }\n\n      if (self._actCallback) {\n        try {\n          self._actCallback(self._response.error)\n        } catch (err) {\n          let error = new Errors.FatalError(Constants.FATAL_ERROR, {\n            pattern\n          }).causedBy(err)\n          self.emit('clientResponseError', error)\n          self.log.fatal(error)\n\n          // let it crash\n          if (self._config.crashOnFatal) {\n            self.fatal()\n          }\n        }\n      }\n    }\n\n    let timeoutHandler = () => {\n      let error = new Errors.TimeoutError(Constants.ACT_TIMEOUT_ERROR, {\n        pattern\n      })\n      this.emit('clientResponseError', error)\n      this.log.error(error)\n      this._response.error = error\n      this._extensions.onClientPostRequest.invoke(this, onClientPostRequestHandler)\n    }\n\n    this._transport.timeout(sid, timeout, 1, timeoutHandler)\n  }\n\n  /**\n   * Create new instance of hemera but with pointer on the previous propertys\n   * so we are able to create a scope per act without lossing the reference to the core api.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  createContext () {\n    var self = this\n\n    var ctx = Object.create(self)\n\n    return ctx\n  }\n\n  /**\n   * Return the list of all registered actions\n   *\n   * @memberOf Hemera\n   */\n  list (params) {\n    return this._router.list(params)\n  }\n\n  /**\n   * Close the process watcher and the underlying transort driver.\n   *\n   * @returns\n   *\n   * @memberOf Hemera\n   */\n  close () {\n    this._heavy.stop()\n\n    return this._transport.close()\n  }\n}\n\nmodule.exports = Hemera\n"]}