{"version":3,"sources":["../lib/extensions.js"],"names":["onClientPreRequest","next","ctx","pattern","_pattern","prevCtx","_prevContext","cleanPattern","_cleanPattern","currentTime","nowHrTime","context$","meta$","merge","delegate$","trace$","parentSpanId","spanId","traceId","randomId","timestamp","service","topic","method","request","id","requestId$","parentId","request$","type","pubsub$","duration","message","meta","delegate","trace","_message","log","info","outbound","emit","onClientPostRequest","msg","_response","payload","inbound","onServerPreRequest","req","res","m","_decoder","decode","call","_request","error","send","value","onServerPreHandler","onServerPreResponse"],"mappings":"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","file":"extensions.js","sourcesContent":["/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\nimport Util from './util'\nimport Hoek from 'hoek'\n\nexport const onClientPreRequest = [function onClientPreRequest(next) {\n\n  let ctx = this\n\n  let pattern = this._pattern\n\n  let prevCtx = this._prevContext\n  let cleanPattern = this._cleanPattern\n  let currentTime = Util.nowHrTime()\n\n  // shared context\n  ctx.context$ = pattern.context$ || prevCtx.context$\n\n  // set metadata by passed pattern or current message context\n  ctx.meta$ = Hoek.merge(pattern.meta$ || {}, ctx.meta$)\n  // is only passed by msg\n  ctx.delegate$ = pattern.delegate$ || {}\n\n  // tracing\n  ctx.trace$ = pattern.trace$ || {}\n  ctx.trace$.parentSpanId = prevCtx.trace$.spanId\n  ctx.trace$.traceId = prevCtx.trace$.traceId || Util.randomId()\n  ctx.trace$.spanId = pattern.trace$ ? pattern.trace$.spanId : Util.randomId()\n  ctx.trace$.timestamp = currentTime\n  ctx.trace$.service = pattern.topic\n  ctx.trace$.method = Util.pattern(pattern)\n\n  // request\n  let request = {\n    id: pattern.requestId$ || Util.randomId(),\n    parentId: ctx.request$.id,\n    timestamp: currentTime,\n    type: pattern.pubsub$ === true ? 'pubsub' : 'request',\n    duration: 0\n  }\n\n  // build msg\n  let message = {\n    pattern: cleanPattern,\n    meta: ctx.meta$,\n    delegate: ctx.delegate$,\n    trace: ctx.trace$,\n    request: request\n  }\n\n  ctx._message = message\n\n  ctx.log.info({\n    outbound: ctx\n  })\n\n  ctx.emit('onClientPreRequest', ctx)\n\n  next()\n}]\n\nexport const onClientPostRequest = [function onClientPostRequest(next) {\n\n  let ctx = this\n  let pattern = this._pattern\n  let msg = ctx._response.payload\n\n  // pass to act context\n  ctx.request$ = msg.request || {}\n  ctx.request$.service = pattern.topic\n  ctx.request$.method = Util.pattern(pattern)\n  ctx.trace$ = msg.trace || {}\n  ctx.meta$ = msg.meta || {}\n\n  ctx.log.info({\n    inbound: ctx\n  })\n\n  ctx.emit('onClientPostRequest', ctx)\n\n  next()\n}]\n\nexport const onServerPreRequest = [function onServerPreRequest(req, res, next) {\n\n  let ctx = this\n\n  let m = ctx._decoder.decode.call(ctx, ctx._request.payload)\n\n  if (m.error) {\n\n    return res.send(m.error)\n  }\n\n  let msg = m.value\n\n  if (msg) {\n\n    ctx.meta$ = msg.meta || {}\n    ctx.trace$ = msg.trace || {}\n    ctx.delegate$ = msg.delegate || {}\n    ctx.request$ = msg.request || {}\n  }\n\n  ctx._request.payload = m.value\n  ctx._request.error = m.error\n\n  ctx.emit('onServerPreRequest', ctx)\n\n  next()\n}]\n\nexport const onServerPreHandler = [function onServerPreHandler(req, res, next) {\n\n  let ctx = this\n\n  ctx.emit('onServerPreHandler', ctx)\n\n  next()\n\n}]\n\nexport const onServerPreResponse = [function onServerPreResponse(req, res, next) {\n\n  let ctx = this\n\n  ctx.emit('onServerPreResponse', ctx)\n\n  next()\n\n}]\n"]}