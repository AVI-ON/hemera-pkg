{"version":3,"sources":["../lib/extensions.js"],"names":["module","exports","onClientPreRequest","next","ctx","pattern","_pattern","prevCtx","_prevContext","cleanPattern","_cleanPattern","currentTime","nowHrTime","context$","meta$","merge","delegate$","trace$","parentSpanId","spanId","traceId","randomId","timestamp","service","topic","method","request","id","requestId$","parentId","request$","type","pubsub$","duration","message","meta","delegate","trace","_message","m","_encoder","encode","call","error","_request","value","log","info","String","emit","onClientPostRequest","msg","_response","onServerPreRequest","_decoder","decode","onServerPreHandler","onServerPreResponse"],"mappings":"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","file":"extensions.js","sourcesContent":["// @flow\n\n/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\nimport Util from './util'\nimport Hoek from 'hoek'\n\nmodule.exports.onClientPreRequest = [function onClientPreRequest(next: Function) {\n\n  let ctx: Hemera = this\n\n  let pattern: Pattern = this._pattern\n\n  let prevCtx = this._prevContext\n  let cleanPattern = this._cleanPattern\n  let currentTime = Util.nowHrTime()\n\n  // shared context\n  ctx.context$ = pattern.context$ || prevCtx.context$\n\n  // set metadata by passed pattern or current message context\n  ctx.meta$ = Hoek.merge(pattern.meta$ || {}, ctx.meta$)\n  // is only passed by msg\n  ctx.delegate$ = pattern.delegate$ || {}\n\n  // tracing\n  ctx.trace$ = pattern.trace$ || {}\n  ctx.trace$.parentSpanId = prevCtx.trace$.spanId\n  ctx.trace$.traceId = prevCtx.trace$.traceId || Util.randomId()\n  ctx.trace$.spanId = pattern.trace$ ? pattern.trace$.spanId : Util.randomId()\n  ctx.trace$.timestamp = currentTime\n  ctx.trace$.service = pattern.topic\n  ctx.trace$.method = Util.pattern(pattern)\n\n  // request\n  let request: Request = {\n    id: pattern.requestId$ || Util.randomId(),\n    parentId: ctx.request$.id,\n    timestamp: currentTime,\n    type: pattern.pubsub$ === true ? 'pubsub' : 'request',\n    duration: 0\n  }\n\n  // build msg\n  let message: ActMessage = {\n    pattern: cleanPattern,\n    meta: ctx.meta$,\n    delegate: ctx.delegate$,\n    trace: ctx.trace$,\n    request: request\n  }\n\n  ctx._message = message\n\n  let m = ctx._encoder.encode.call(ctx, ctx._message)\n\n  // throw encoding issue\n  if (m.error) {\n\n    return next(m.error)\n  }\n\n  ctx._request = m.value\n\n  ctx.log.info(pattern, `ACT_OUTBOUND - ID:${String(ctx._message.request.id)}`)\n\n  ctx.emit('onClientPreRequest', ctx)\n\n  next()\n}]\n\nmodule.exports.onClientPostRequest = [function onClientPostRequest(next: Function) {\n\n  let ctx: Hemera = this\n  let pattern: Pattern = this._pattern\n  let msg = ctx._response.value\n\n  // pass to act context\n  ctx.request$ = msg.request || {}\n  ctx.request$.service = pattern.topic\n  ctx.request$.method = Util.pattern(pattern)\n  ctx.trace$ = msg.trace || {}\n  ctx.meta$ = msg.meta || {}\n\n  ctx.log.info(`ACT_INBOUND - ID:${ctx.request$.id} (${ctx.request$.duration / 1000000}ms)`)\n\n  ctx.emit('onClientPostRequest', ctx)\n\n  next()\n}]\n\nmodule.exports.onServerPreRequest = [function onServerPreRequest(next: Function) {\n\n  let ctx: Hemera = this\n\n  let m = ctx._decoder.decode.call(ctx, ctx._request)\n\n  if(m.error) {\n\n    return next(m.error)\n  }\n\n  let msg = m.value\n\n  if (msg) {\n\n    ctx.meta$ = msg.meta || {}\n    ctx.trace$ = msg.trace || {}\n    ctx.delegate$ = msg.delegate || {}\n    ctx.request$ = msg.request || {}\n  }\n\n  ctx._request = m\n\n  ctx.emit('onServerPreRequest', ctx)\n\n  next()\n}]\n\nmodule.exports.onServerPreHandler = [function onServerPreHandler(next: Function) {\n\n  let ctx: Hemera = this\n\n  ctx.emit('onServerPreHandler', ctx)\n\n  next()\n\n}]\n\nmodule.exports.onServerPreResponse = [function onServerPreResponse(next: Function) {\n\n  let ctx: Hemera = this\n\n  ctx.emit('onServerPreResponse', ctx)\n\n  next()\n\n}]\n"]}