{"version":3,"sources":["../lib/extensions.js"],"names":["onClientPreRequest","next","ctx","pattern","_pattern","prevCtx","_prevContext","cleanPattern","_cleanPattern","currentTime","nowHrTime","context$","meta$","Object","assign","delegate$","trace$","parentSpanId","spanId","traceId","randomId","timestamp","service","topic","method","request","id","requestId$","parentId","request$","type","pubsub$","duration","message","meta","delegate","trace","_message","log","info","outbound","emit","onClientPostRequest","msg","_response","payload","inbound","onServerPreRequest","req","res","m","_decoder","decode","call","_request","error","send","value","onServerPreHandler","onServerPreResponse"],"mappings":"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","file":"extensions.js","sourcesContent":["/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\nimport Util from './util'\n\nexport const onClientPreRequest = [function onClientPreRequest (next) {\n  let ctx = this\n\n  let pattern = this._pattern\n\n  let prevCtx = this._prevContext\n  let cleanPattern = this._cleanPattern\n  let currentTime = Util.nowHrTime()\n\n  // shared context\n  ctx.context$ = pattern.context$ || prevCtx.context$\n\n  // set metadata by passed pattern or current message context\n  ctx.meta$ = Object.assign(pattern.meta$ || {}, ctx.meta$)\n  // is only passed by msg\n  ctx.delegate$ = pattern.delegate$ || {}\n\n  // tracing\n  ctx.trace$ = pattern.trace$ || {}\n  ctx.trace$.parentSpanId = prevCtx.trace$.spanId\n  ctx.trace$.traceId = prevCtx.trace$.traceId || Util.randomId()\n  ctx.trace$.spanId = pattern.trace$ ? pattern.trace$.spanId : Util.randomId()\n  ctx.trace$.timestamp = currentTime\n  ctx.trace$.service = pattern.topic\n  ctx.trace$.method = Util.pattern(pattern)\n\n  // request\n  let request = {\n    id: pattern.requestId$ || Util.randomId(),\n    parentId: ctx.request$.id,\n    timestamp: currentTime,\n    type: pattern.pubsub$ === true ? 'pubsub' : 'request',\n    duration: 0\n  }\n\n  // build msg\n  let message = {\n    pattern: cleanPattern,\n    meta: ctx.meta$,\n    delegate: ctx.delegate$,\n    trace: ctx.trace$,\n    request: request\n  }\n\n  ctx._message = message\n\n  ctx.log.info({\n    outbound: ctx\n  })\n\n  ctx.emit('clientPreRequest')\n\n  next()\n}]\n\nexport const onClientPostRequest = [function onClientPostRequest (next) {\n  let ctx = this\n  let pattern = this._pattern\n  let msg = ctx._response.payload\n\n  // pass to act context\n  if (msg) {\n    ctx.request$ = msg.request || {}\n    ctx.trace$ = msg.trace || {}\n    ctx.meta$ = msg.meta || {}\n  }\n\n  ctx.request$.service = pattern.topic\n  ctx.request$.method = Util.pattern(pattern)\n\n  ctx.log.info({\n    inbound: ctx\n  })\n\n  ctx.emit('clientPostRequest')\n\n  next()\n}]\n\nexport const onServerPreRequest = [function onServerPreRequest (req, res, next) {\n  let ctx = this\n\n  let m = ctx._decoder.decode.call(ctx, ctx._request.payload)\n\n  if (m.error) {\n    return res.send(m.error)\n  }\n\n  let msg = m.value\n\n  if (msg) {\n    ctx.meta$ = msg.meta || {}\n    ctx.trace$ = msg.trace || {}\n    ctx.delegate$ = msg.delegate || {}\n    ctx.request$ = msg.request || {}\n  }\n\n  ctx._request.payload = m.value\n  ctx._request.error = m.error\n\n  ctx.emit('serverPreRequest')\n\n  next()\n}]\n\nexport const onServerPreHandler = [function onServerPreHandler (req, res, next) {\n  let ctx = this\n\n  ctx.emit('serverPreHandler')\n\n  next()\n}]\n\nexport const onServerPreResponse = [function onServerPreResponse (req, res, next) {\n  let ctx = this\n\n  ctx.emit('serverPreResponse')\n\n  next()\n}]\n"]}