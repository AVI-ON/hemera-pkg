{"version":3,"sources":["../lib/ext.js"],"names":["Ext","type","server","_stack","_type","_server","handler","push","handlers","concat","ctx","cb","each","item","next","i","response","request","call","serial","bind","array","method","callback","length","iterate","done","err","value","module","exports"],"mappings":";;;;AAEA;;;;;;AAMA;;;;AACA;;;;;;;;AAEA;;;IAGMA,G;AAMJ,eAAYC,IAAZ,EAA0BC,MAA1B,EAA6C;AAAA;;AAE3C,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAaH,IAAb;AACA,SAAKI,OAAL,GAAeH,MAAf;AACD;;AAED;;;;;;;;;;;wBAOII,O,EAAmB;;AAErB,WAAKH,MAAL,CAAYI,IAAZ,CAAiBD,OAAjB;AAED;;AAED;;;;;;;;;;6BAOSE,Q,EAA4B;;AAEnC,WAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYM,MAAZ,CAAmBD,QAAnB,CAAd;AAED;AACD;;;;;;;;;;2BAOOE,G,EAAaC,E,EAAc;AAAA;;AAEhC,UAAMC,OAAO,SAAPA,IAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,CAAb,EAAmB;;AAE9B,YAAI,MAAKV,OAAT,EAAkB;AAChB,cAAMW,WAAW,uBAAaN,GAAb,CAAjB;AACAM,mBAASF,IAAT,GAAgBA,IAAhB;AACA,cAAMG,UAAU,sBAAYP,GAAZ,CAAhB;;AAEAG,eAAKK,IAAL,CAAUR,GAAV,EAAeO,OAAf,EAAwBD,QAAxB,EAAkCF,IAAlC,EAAwCC,CAAxC;AACD,SAND,MAMO;;AAELF,eAAKK,IAAL,CAAUR,GAAV,EAAeI,IAAf,EAAqBC,CAArB;AACD;AAEF,OAbD;;AAeAf,UAAImB,MAAJ,CAAW,KAAKhB,MAAhB,EAAwBS,IAAxB,EAA8BD,GAAGS,IAAH,CAAQV,GAAR,CAA9B;AAED;AACD;;;;;;;;;;;;2BAScW,K,EAAyBC,M,EAAkBC,Q,EAAoB;;AAE3E,UAAI,CAACF,MAAMG,MAAX,EAAmB;;AAEjBD;AACD,OAHD,MAGO;AAAA;;AAEL,cAAIR,IAAI,CAAR;;AAEA,cAAMU,UAAU,SAAVA,OAAU,GAAY;;AAE1B,gBAAMC,OAAO,SAAPA,IAAO,CAAUC,GAAV,EAAeC,KAAf,EAAsB;;AAEjC,kBAAID,GAAJ,EAAS;;AAEPJ,yBAASI,GAAT;AACD,eAHD,MAGO,IAAIC,KAAJ,EAAW;;AAEhBL,yBAAS,IAAT,EAAeK,KAAf;AACD,eAHM,MAGA;;AAELb,oBAAIA,IAAI,CAAR;;AAEA,oBAAIA,IAAIM,MAAMG,MAAd,EAAsB;;AAEpBC;AACD,iBAHD,MAGO;;AAELF,2BAAS,IAAT,EAAeK,KAAf;AACD;AACF;AACF,aApBD;;AAsBAN,mBAAOD,MAAMN,CAAN,CAAP,EAAiBW,IAAjB,EAAuBX,CAAvB;AACD,WAzBD;;AA2BAU;AA/BK;AAgCN;AACF;;;;;;AAGHI,OAAOC,OAAP,GAAiB9B,GAAjB","file":"ext.js","sourcesContent":["// @flow\n\n/*!\n * hemera\n * Copyright(c) 2016 Dustin Deus (deusdustin@gmail.com)\n * MIT Licensed\n */\n\nimport Response from './response'\nimport Request from './request'\n\n/**\n * @class Ext\n */\nclass Ext {\n\n  _stack: Array<Function> ;\n  _type: string;\n  _server: boolean;\n\n  constructor(type: string, server? : boolean) {\n\n    this._stack = []\n    this._type = type\n    this._server = server\n  }\n\n  /**\n   *\n   *\n   * @param {any} handler\n   *\n   * @memberOf Ext\n   */\n  add(handler: Function) {\n\n    this._stack.push(handler)\n\n  }\n\n  /**\n   *\n   *\n   * @param {Array<Function>} handlers\n   *\n   * @memberOf Ext\n   */\n  addRange(handlers: Array<Function> ) {\n\n    this._stack = this._stack.concat(handlers)\n\n  }\n  /**\n   *\n   *\n   * @param {any} cb\n   *\n   * @memberOf Ext\n   */\n  invoke(ctx: Hemera, cb: Function) {\n\n    const each = (item, next, i) => {\n\n      if (this._server) {\n        const response = new Response(ctx)\n        response.next = next\n        const request = new Request(ctx)\n\n        item.call(ctx, request, response, next, i);\n      } else {\n\n        item.call(ctx, next, i);\n      }\n\n    }\n\n    Ext.serial(this._stack, each, cb.bind(ctx))\n\n  }\n  /**\n   *\n   *\n   * @param {Array<Function>} array\n   * @param {Function} method\n   * @param {Function} callback\n   *\n   * @memberOf Ext\n   */\n  static serial(array: Array<Function> , method: Function, callback: Function) {\n\n    if (!array.length) {\n\n      callback()\n    } else {\n\n      let i = 0;\n\n      const iterate = function () {\n\n        const done = function (err, value) {\n\n          if (err) {\n\n            callback(err)\n          } else if (value) {\n\n            callback(null, value)\n          } else {\n\n            i = i + 1\n\n            if (i < array.length) {\n\n              iterate()\n            } else {\n\n              callback(null, value)\n            }\n          }\n        }\n\n        method(array[i], done, i)\n      }\n\n      iterate()\n    }\n  }\n}\n\nmodule.exports = Ext\n"]}